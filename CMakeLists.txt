CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

IF (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} GREATER 3.0)
cmake_policy(SET CMP0026 OLD)
cmake_policy(SET CMP0039 NEW)
cmake_policy(SET CMP0042 OLD)
cmake_policy(SET CMP0043 OLD)
cmake_policy(SET CMP0045 OLD)
cmake_policy(SET CMP0048 OLD)
cmake_policy(SET CMP0057 NEW)
ENDIF()

PROJECT(Designer)

# Certivibes modules list
SET(INCLUDED_CERTIVIBE_COMPONENTS BASE ALLPLUGINS EBML SYSTEM FS XML TOOLKIT)

# These versions are used by the subprojects by default.
# If you wish to maintain specific version numbers for a subproject, please do so in the projects CMakeLists.txt
SET(MENSIA_GLOBAL_VERSION_MAJOR 2)
SET(MENSIA_GLOBAL_VERSION_MINOR 6)
SET(MENSIA_GLOBAL_VERSION_TWEAK 0)
SET(MENSIA_GLOBAL_VERSION_PATCH 0)
SET(MENSIA_GLOBAL_VERSION_STRING "${MENSIA_GLOBAL_VERSION_MAJOR}.${MENSIA_GLOBAL_VERSION_MINOR}.${MENSIA_GLOBAL_VERSION_TWEAK}.${MENSIA_GLOBAL_VERSION_PATCH}")

SET(OV_GLOBAL_VERSION_MAJOR 0)
SET(OV_GLOBAL_VERSION_MINOR 17)
SET(OV_GLOBAL_VERSION_PATCH 0)
SET(OV_GLOBAL_VERSION_STRING "${OV_GLOBAL_VERSION_MAJOR}.${OV_GLOBAL_VERSION_MINOR}.${OV_GLOBAL_VERSION_PATCH}")

OPTION(Flag_VerboseOutput "Verbose CMake output" OFF)
OPTION(Flag_SilentConsole "Disable logs to console in Archway" ON)

SET(OV_CUSTOM_DEPENDENCIES_PATH "${CMAKE_SOURCE_DIR}/dependencies")
SET(OV_SOURCE_DEPENDENCIES_PATH "${CMAKE_SOURCE_DIR}/dependencies-source")
SET(OV_ICON_PATH "${CMAKE_SOURCE_DIR}/scripts/icons")

IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
	SET(OPENVIBE_SDK_PATH "${OV_CUSTOM_DEPENDENCIES_PATH}/certivibe-debug" CACHE STRING "")
ELSE()
	SET(OPENVIBE_SDK_PATH "${OV_CUSTOM_DEPENDENCIES_PATH}/certivibe-release" CACHE STRING "")
ENDIF()

SET(CV_DEPENDENCIES_PATH "${CMAKE_SOURCE_DIR}/dependencies" CACHE STRING "")
SET(OV_CONFIG_SUBDIR "OpenVIBE" CACHE STRING "Subdirectory under user directory when configuration and logs will be saved")
SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake-modules;${OPENVIBE_SDK_PATH}/share")

INCLUDE("OvMessages")

###################################################################################
# We check the local version of the dependencies
# The installer should install local manifest, if a mismatch is detected CMake will cancel the build
# and ask to reinstall the missing/update dependencies
debug_message("Checking local dependencies manifest...")

IF(WIN32)
	SET(MANDATORY_DEPENDENCIES_LIST "")
	# update this section when updating the dependencies.
	SET(DEPENDENCY_BOOST_VERSION        "1.55")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_BOOST_VERSION)
	SET(DEPENDENCY_CMAKE_VERSION        "2.8.12.1")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_CMAKE_VERSION)
	SET(DEPENDENCY_CURL_VERSION         "7.19.3")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_CURL_VERSION)
	SET(DEPENDENCY_DOC_VERSION          "1.0.0")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_DOC_VERSION)
	SET(DEPENDENCY_EIGEN_VERSION        "3.2.0")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_EIGEN_VERSION)
	SET(DEPENDENCY_ELECTRON_VERSION     "0.29.2")
	SET(DEPENDENCY_EXPAT_VERSION        "2.0.1")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_EXPAT_VERSION)
	SET(DEPENDENCY_FREEALUT_VERSION     "1.1")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_FREEALUT_VERSION)
	SET(DEPENDENCY_FTD2XX_VERSION       "2.12.10")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_FTD2XX_VERSION)
	SET(DEPENDENCY_GTK_VERSION          "2.22.1")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_GTK_VERSION)
	SET(DEPENDENCY_LIBOGG_VERSION       "1.2.1")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_LIBOGG_VERSION)
	SET(DEPENDENCY_LIBVORBIS_VERSION    "1.3.2")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_LIBVORBIS_VERSION)
	SET(DEPENDENCY_LUA_VERSION          "5.1.4")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_LUA_VERSION)
	SET(DEPENDENCY_NINJA_VERSION        "1.4.0")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_NINJA_VERSION)
	SET(DEPENDENCY_NSIS_VERSION         "3.0b1")
	SET(DEPENDENCY_OPENAL_VERSION       "1.1")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_OPENAL_VERSION)
	SET(DEPENDENCY_PLINK_VERSION        "0.62.0.0")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_PLINK_VERSION)
	SET(DEPENDENCY_PORTQRY_VERSION      "1.0")
	SET(DEPENDENCY_PORTAUDIO_VERSION    "19")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_PORTAUDIO_VERSION)
	SET(DEPENDENCY_PTHREADS_VERSION     "2.8.0")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_PTHREADS_VERSION)
	SET(DEPENDENCY_SIGNALS_VERSION      "2.5.0.0")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_SIGNALS_VERSION)
	SET(DEPENDENCY_THIRDPARTIES_VERSION "2.5.11")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_THIRDPARTIES_VERSION)
	SET(DEPENDENCY_TVICPORT_VERSION     "5.0.2.1")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_TVICPORT_VERSION)
	SET(DEPENDENCY_VRPN_VERSION         "7.26")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_VRPN_VERSION)
	SET(DEPENDENCY_ZIP_VERSION          "3.0")
	LIST(APPEND MANDATORY_DEPENDENCIES_LIST DEPENDENCY_ZIP_VERSION)

	IF(NOT EXISTS "${OV_CUSTOM_DEPENDENCIES_PATH}/manifest.txt")
		MESSAGE(WARNING "Your local dependency folder do not have any manifest. Please run the Mensia Dependencies installer, and retry a new build from scratch (cleanup and rebuild)")
	ELSE()
		SET(LOCAL_DEPENDENCY_COUNT 0)

		# the manifest is a list of NAME=VERSION, 1 per line
		FILE(READ "${OV_CUSTOM_DEPENDENCIES_PATH}/manifest.txt" DEPENDENCIES_LOCAL_VERSION)
		# Convert file contents into a CMake list (where each element in the list
		# is one line of the file)
		STRING(REGEX REPLACE ";" "\\\\;" DEPENDENCIES_LOCAL_VERSION "${DEPENDENCIES_LOCAL_VERSION}")
		STRING(REGEX REPLACE "\n" ";" DEPENDENCIES_LOCAL_VERSION "${DEPENDENCIES_LOCAL_VERSION}")

		SET(DEPENDENCY_CHECK 1)
		FOREACH(dependency IN LISTS DEPENDENCIES_LOCAL_VERSION)
			STRING(FIND "${dependency}" "=" EQU_POS)
			IF(NOT ${EQU_POS} EQUAL -1)
				MATH(EXPR VER_POS "${EQU_POS}+1")
				STRING(SUBSTRING "${dependency}" 0 ${EQU_POS} DEP_NAME)
				STRING(SUBSTRING "${dependency}" ${VER_POS} -1 DEP_VERSION)
				IF(NOT ${DEPENDENCY_${DEP_NAME}_VERSION} STREQUAL "")
					MATH(EXPR LOCAL_DEPENDENCY_COUNT "${LOCAL_DEPENDENCY_COUNT}+1")
					IF(${DEP_VERSION} STREQUAL ${DEPENDENCY_${DEP_NAME}_VERSION})
						debug_message("Local Dependency ${DEP_NAME} has version ${DEP_VERSION} -- OK")
						LIST(REMOVE_ITEM MANDATORY_DEPENDENCIES_LIST DEPENDENCY_${DEP_NAME}_VERSION)
					ELSE()
						MESSAGE(WARNING "Local Dependency ${DEP_NAME} has version ${DEP_VERSION} -- MISMATCH (expected ${DEPENDENCY_${DEP_NAME}_VERSION})!")
						SET(DEPENDENCY_CHECK 0)
					ENDIF()
				ELSE()
					MESSAGE(WARNING "Local Dependency ${DEP_NAME} with version ${DEP_VERSION} was not expected and probably won't be used !")
					# we do not fail for that
				ENDIF()
			ENDIF()
		ENDFOREACH()
		
		LIST(LENGTH MANDATORY_DEPENDENCIES_LIST LENGTH_MANDATORY_DEPENDENCIES_LIST)
		IF(NOT ${LENGTH_MANDATORY_DEPENDENCIES_LIST} EQUAL 0)
			MESSAGE(FATAL_ERROR "At least one dependency is missing: ${MANDATORY_DEPENDENCIES_LIST}. Please run the Mensia Dependency installer before retrying.")
		ENDIF()

		IF(NOT ${DEPENDENCY_CHECK})
			MESSAGE(FATAL_ERROR "At least one dependency is out-of-date. Please run the Mensia Dependency installer before retrying. ")
		ELSE()
			debug_message("All dependencies are up-to-date. Configuration continues...")
		ENDIF()
	ENDIF() # NOT EXISTS "${OV_CUSTOM_DEPENDENCIES_PATH}/manifest.txt"
ENDIF() # WIN32

###################################################################################

SET(OEM_DISTRIBUTION "mensia")
SET(INSTALL_EXE OFF)

# The user files will be stored in .../OV_CONFIG_SUBDIR folder
ADD_DEFINITIONS("-DOV_PROJECT_NAME=\"openvibe\"")
ADD_DEFINITIONS("-DOV_CONFIG_SUBDIR=\"${OV_CONFIG_SUBDIR}\"")

# Default is to build to dist/. If you wish a custom install, set your own MAKE_INSTALL_PREFIX when you call CMake. Safest to do under a fakeroot.
IF(NOT CMAKE_INSTALL_PREFIX)
	SET(CMAKE_INSTALL_PREFIX "${CMAKE_SOURCE_DIR}/dist")
ENDIF(NOT CMAKE_INSTALL_PREFIX)

SET(DOCUMENTATION_TEMP_DIRECTORY "${CMAKE_INSTALL_PREFIX}/doc-tmp")

IF(WIN32)
	ADD_DEFINITIONS("-DNOMINMAX -DBOOST_ALL_NO_LIB")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4355")
	SET(OV_WIN32_BOOST_VERSION "1_55")
ELSEIF(APPLE)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall")
ELSEIF(UNIX)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -Wall")
	# This ENV var is needed to locate our custom IT++ on Linux
	SET(ENV{PKG_CONFIG_PATH} "${OV_CUSTOM_DEPENDENCIES_PATH}/lib/pkgconfig")
ELSE(WIN32)
	MESSAGE(WARNING "Warning: unknown platform")
ENDIF(WIN32)

IF(NOT CMAKE_BUILD_TYPE)
	debug_message("Setting default build type to Release")
	SET(CMAKE_BUILD_TYPE "Release")
ENDIF(NOT CMAKE_BUILD_TYPE)

# Print the used compilation parameters (for transparency)
GET_DIRECTORY_PROPERTY(TMP_DEFINITIONS COMPILE_DEFINITIONS)
debug_message("Compilation flags used at source root: ")
debug_message("  COMPILE_DEFINITIONS = '${TMP_DEFINITIONS}'")
debug_message("  CMAKE_CXX_FLAGS = '${CMAKE_CXX_FLAGS}'")
debug_message("  CMAKE_CXX_FLAGS_RELEASE = '${CMAKE_CXX_FLAGS_RELEASE}'")
debug_message("  CMAKE_CXX_FLAGS_DEBUG = '${CMAKE_CXX_FLAGS_DEBUG}'")

# if no specific branch has been given for an openvibe component, default is to compile its trunk folder
## SET(OV_TRUNK "trunc")

# SET(OV_COMPILE_TESTS "true")
FUNCTION(SET_BUILD_PLATFORM)
	IF("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
		ADD_DEFINITIONS(-DTARGET_ARCHITECTURE_x64)
	ELSEIF("${CMAKE_SIZEOF_VOID_P}" EQUAL "4")
		ADD_DEFINITIONS(-DTARGET_ARCHITECTURE_i386)
	ELSE()
		ADD_DEFINITIONS(-DTARGET_ARCHITECTURE_Unknown)
	ENDIF()

	IF(WIN32)
		ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
		ADD_DEFINITIONS(-DTARGET_OS_Windows)
		ADD_DEFINITIONS(-DTARGET_COMPILER_VisualStudio)
	ELSEIF(APPLE)
		ADD_DEFINITIONS(-fnon-call-exceptions)
		ADD_DEFINITIONS(-DTARGET_OS_MacOS)
		# ADD_DEFINITIONS(-DTARGET_ARCHITECTURE_x64)
		ADD_DEFINITIONS(-DTARGET_COMPILER_LLVM)
	ELSEIF(UNIX)
		# ADD_DEFINITIONS(-fvisibility=hidden) # This flag should be present... man gcc
		ADD_DEFINITIONS(-fnon-call-exceptions)
		ADD_DEFINITIONS(-DTARGET_OS_Linux)
		ADD_DEFINITIONS(-DTARGET_COMPILER_GCC)
	ENDIF()

ENDFUNCTION()

# By setting SKIP[_FOLDER]* you can skip a subtree (example: SKIP_A_B_C skips folder a/b/c and all its subfolders if any)

# Custom cmakelist can be used to overwrite the default compilation & packaging parameters
IF(EXISTS "${CMAKE_SOURCE_DIR}/CustomCMakeLists.txt")
	debug_message("Found custom build settings")
	INCLUDE("${CMAKE_SOURCE_DIR}/CustomCMakeLists.txt")
ENDIF()

#################################################################
# We deduce the branding from the OEM_DISTRIBUTION
IF(OEM_DISTRIBUTION STREQUAL "openvibe")
	SET(BRAND_NAME "OpenViBE")
	SET(STUDIO_NAME "Designer")
ELSEIF(OEM_DISTRIBUTION STREQUAL "mensia")
	SET(BRAND_NAME "NeuroRT")
	SET(STUDIO_NAME "Studio")
ELSE()
	MESSAGE(FATAL_ERROR "OEM_DISTRIBUTION unrocognized (${OEM_DISTRIBUTION}) ! CMake cannot deduce the brand and product names. ")
ENDIF()

string(TOLOWER ${BRAND_NAME} LOWER_BRAND_NAME)
string(TOLOWER ${STUDIO_NAME} LOWER_STUDIO_NAME)
ADD_DEFINITIONS(-DBRAND_NAME="${BRAND_NAME}")
ADD_DEFINITIONS(-DSTUDIO_NAME="${STUDIO_NAME}")
#################################################################

SET(OV_LAUNCHER_SOURCE_PATH "${CMAKE_SOURCE_DIR}/cmake-modules/launchers")

# a list of all project which will be filled by the directory traversal. This is needed to generate the documentation.
SET_PROPERTY(GLOBAL PROPERTY OV_PROP_CURRENT_PROJECTS "")
SET_PROPERTY(GLOBAL PROPERTY OV_PROP_CURRENT_PROJECTS_BUILD_DIR "")

# Used by the various Find* scripts to locate OpenViBE modules
SET(OV_BASE_DIR ${CMAKE_SOURCE_DIR})

# needed for making visual studio projects when this script is called without CMAKE_BUILD_TYPE
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS_DEBUG "TARGET_BUILDTYPE_Debug")
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS_RELEASE "TARGET_BUILDTYPE_Release")
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS_RELWITHDEBINFO "TARGET_BUILDTYPE_Release")

# OpenViBE-specific helper functions that are used by the CMakeLists of the subprojects.
#INCLUDE("OvAddSingleProject")
INCLUDE("OvAddProjects")
INCLUDE("OvInstallLaunchScript")
INCLUDE("OvLinkBoostLib")
INCLUDE("OvDelayLoad")
INCLUDE("SetProjectVersion")
INCLUDE("OvMessages")

# Setup knowledge of GNU-style install path variables
INCLUDE("GNUInstallDirs")
SET(CMAKE_INSTALL_FULL_DOCDIR "${CMAKE_INSTALL_FULL_BINDIR}/../doc/html")

# Add directories that OpenViBE will use to look for its components runtime, unless overridden by environment variables in the launch scripts.
# These defines should only be used in "openvibe/ov_directories.h".
ADD_DEFINITIONS(-DOV_CMAKE_PATH_ROOT="${CMAKE_INSTALL_PREFIX}")
ADD_DEFINITIONS(-DOV_CMAKE_PATH_BIN="${CMAKE_INSTALL_FULL_BINDIR}")
ADD_DEFINITIONS(-DOV_CMAKE_PATH_LIB="${CMAKE_INSTALL_FULL_LIBDIR}")
ADD_DEFINITIONS(-DOV_CMAKE_PATH_DATA="${CMAKE_INSTALL_FULL_DATADIR}/openvibe")

# Add Mensia definitions
SET(MENSIA_BASE_DIR "${CMAKE_SOURCE_DIR}/externals/mensia")
ADD_DEFINITIONS(-DMENSIA_CMAKE_PATH_ROOT="${CMAKE_INSTALL_PREFIX}")
ADD_DEFINITIONS(-DMENSIA_CMAKE_PATH_BIN="${CMAKE_INSTALL_FULL_BINDIR}")
ADD_DEFINITIONS(-DMENSIA_CMAKE_PATH_DATA="${CMAKE_INSTALL_FULL_DATADIR}/mensia")
ADD_DEFINITIONS(-DMENSIA_CMAKE_PATH_LIB="${CMAKE_INSTALL_FULL_LIBDIR}")

# Sets the PROJECT_VERSION variable to something, depending on overriding OvSetProjectVersion.cmake files
OV_SET_PROJECT_VERSION()

MESSAGE(STATUS "BUILDING VERSION : ${PROJECT_VERSION} OpenViBE : ${OV_PROJECT_BRANCH}~${OV_PROJECT_COMMITHASH} Mensia : ${PROJECT_BRANCH}~${PROJECT_COMMITHASH}")

# Add vendor specific installation instructions
# Traverse these directories and build their components

IF(NOT(SKIP_PLUGINS))
	ADD_SUBDIRECTORY("plugins/")
ENDIF()

IF(NOT(SKIP_APPLICATIONS))
	ADD_SUBDIRECTORY("applications/")
ENDIF()

IF(NOT(SKIP_LIBRARIES))
	ADD_SUBDIRECTORY("libraries/")
ENDIF()

IF(NOT(SKIP_VISUALIZATION_TOOLKIT))
	ADD_SUBDIRECTORY("visualization-toolkit/")
ENDIF()

# add the scripts to the project so IDEs using the CMake file are aware of them
FILE(GLOB_RECURSE script_files scripts/*.cmd scripts/*.sh scripts/*.nsi)
ADD_CUSTOM_TARGET(openvibe-scripts SOURCES ${script_files})
