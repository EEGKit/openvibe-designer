/*********************************************************************
 * Software License Agreement (AGPL-3 License)
 *
 * OpenViBE Designer
 * Based on OpenViBE V1.1.0, Copyright (C) Inria, 2006-2015
 * Copyright (C) Inria, 2015-2017,V1.0
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#if defined TARGET_HAS_ThirdPartyOpenGL

#include "mCRendererLoreta.hpp"
#include "m_RendererTools.hpp"

#include "content/loreta_anatomic_voxels.hpp"
#include "content/loreta_roi_voxels.hpp"
#include "content/Face.obj.hpp"
#include "content/Scalp.obj.hpp"

#include <cstring>
#include <cstdio>

using namespace Mensia;
using namespace AdvancedVisualization;

using namespace LoretaRegions;

namespace
{
	//-32,8,-40,
	int g_iLoretaVoxel[2394][3] = { { 52, -41, -11 }, { 45, -41, -11 }, { 38, -41, -11 }, { 31, -41, -11 }, { -32, -41, -11 }, { -39, -41, -11 }, { -46, -41, -11 }, { -53, -41, -11 }, { 52, -41, -4 }, { 45, -41, -4 }, { 38, -41, -4 }, { 31, -41, -4 }, { 24, -41, -4 }, { -25, -41, -4 }, { -32, -41, -4 }, { -39, -41, -4 }, { -46, -41, -4 }, { -53, -41, -4 }, { 52, -41, 3 }, { 45, -41, 3 }, { 38, -41, 3 }, { 31, -41, 3 }, { 24, -41, 3 }, { -18, -41, 3 }, { -25, -41, 3 }, { -32, -41, 3 }, { -39, -41, 3 }, { -46, -41, 3 }, { -53, -41, 3 }, { 45, -41, 10 }, { 38, -41, 10 }, { 31, -41, 10 }, { -25, -41, 10 }, { -32, -41, 10 }, { -39, -41, 10 }, { -46, -41, 10 }, { 38, -41, 17 }, { 31, -41, 17 }, { -32, -41, 17 }, { -39, -41, 17 }, { 59, -34, -18 }, { 52, -34, -18 }, { 45, -34, -18 }, { 38, -34, -18 }, { 31, -34, -18 }, { -32, -34, -18 }, { -39, -34, -18 }, { -46, -34, -18 }, { -53, -34, -18 }, { -60, -34, -18 }, { 59, -34, -11 }, { 52, -34, -11 }, { 45, -34, -11 }, { 38, -34, -11 }, { 31, -34, -11 }, { 24, -34, -11 }, { -25, -34, -11 }, { -32, -34, -11 }, { -39, -34, -11 }, { -46, -34, -11 }, { -53, -34, -11 }, { -60, -34, -11 }, { 59, -34, -4 }, { 52, -34, -4 }, { 31, -34, -4 }, { 24, -34, -4 }, { 17, -34, -4 }, { -18, -34, -4 }, { -25, -34, -4 }, { -32, -34, -4 }, { -39, -34, -4 }, { -46, -34, -4 }, { -53, -34, -4 }, { -60, -34, -4 }, { 52, -34, 3 }, { 45, -34, 3 }, { 24, -34, 3 }, { -18, -34, 3 }, { -25, -34, 3 }, { -46, -34, 3 }, { -53, -34, 3 }, { 52, -34, 10 }, { 45, -34, 10 }, { 38, -34, 10 }, { 31, -34, 10 }, { 24, -34, 10 }, { -25, -34, 10 }, { -32, -34, 10 }, { -39, -34, 10 }, { -46, -34, 10 }, { -53, -34, 10 }, { 45, -34, 17 }, { 38, -34, 17 }, { 31, -34, 17 }, { -32, -34, 17 }, { -39, -34, 17 }, { -46, -34, 17 }, { 52, -27, -46 }, { 45, -27, -46 }, { -46, -27, -46 }, { -53, -27, -46 }, { 59, -27, -39 }, { 52, -27, -39 }, { 45, -27, -39 }, { 38, -27, -39 }, { -39, -27, -39 }, { -46, -27, -39 }, { -53, -27, -39 }, { -60, -27, -39 }, { 59, -27, -32 }, { 52, -27, -32 }, { 45, -27, -32 }, { 38, -27, -32 }, { 31, -27, -32 }, { -32, -27, -32 }, { -39, -27, -32 }, { -46, -27, -32 }, { -53, -27, -32 }, { -60, -27, -32 }, { 59, -27, -25 }, { 52, -27, -25 }, { 45, -27, -25 }, { 38, -27, -25 }, { 31, -27, -25 }, { 24, -27, -25 }, { -25, -27, -25 }, { -32, -27, -25 }, { -39, -27, -25 }, { -46, -27, -25 }, { -53, -27, -25 }, { -60, -27, -25 }, { 59, -27, -18 }, { 52, -27, -18 }, { 45, -27, -18 }, { 38, -27, -18 }, { 31, -27, -18 }, { -32, -27, -18 }, { -39, -27, -18 }, { -46, -27, -18 }, { -53, -27, -18 }, { -60, -27, -18 }, { 59, -27, -11 }, { 52, -27, -11 }, { 38, -27, -11 }, { 31, -27, -11 }, { 24, -27, -11 }, { 17, -27, -11 }, { -18, -27, -11 }, { -25, -27, -11 }, { -32, -27, -11 }, { -39, -27, -11 }, { -53, -27, -11 }, { -60, -27, -11 }, { 59, -27, -4 }, { 52, -27, -4 }, { 31, -27, -4 }, { 24, -27, -4 }, { 17, -27, -4 }, { -18, -27, -4 }, { -25, -27, -4 }, { -32, -27, -4 }, { -60, -27, -4 }, { 59, -27, 3 }, { 52, -27, 3 }, { 31, -27, 3 }, { 24, -27, 3 }, { 17, -27, 3 }, { -18, -27, 3 }, { -25, -27, 3 }, { -32, -27, 3 }, { -53, -27, 3 }, { -60, -27, 3 }, { 52, -27, 10 }, { 45, -27, 10 }, { 38, -27, 10 }, { 31, -27, 10 }, { -32, -27, 10 }, { -39, -27, 10 }, { -46, -27, 10 }, { -53, -27, 10 }, { 45, -27, 17 }, { 38, -27, 17 }, { 31, -27, 17 }, { -32, -27, 17 }, { -39, -27, 17 }, { -46, -27, 17 }, { 10, -27, 24 }, { 3, -27, 24 }, { -4, -27, 24 }, { -11, -27, 24 }, { 10, -27, 31 }, { 3, -27, 31 }, { -4, -27, 31 }, { -11, -27, 31 }, { 10, -27, 38 }, { 3, -27, 38 }, { -4, -27, 38 }, { -11, -27, 38 }, { 10, -27, 45 }, { 3, -27, 45 }, { -4, -27, 45 }, { -11, -27, 45 }, { 10, -27, 52 }, { 3, -27, 52 }, { -4, -27, 52 }, { -11, -27, 52 }, { 52, -20, -60 }, { 45, -20, -60 }, { 38, -20, -60 }, { -39, -20, -60 }, { -46, -20, -60 }, { -53, -20, -60 }, { 59, -20, -53 }, { 52, -20, -53 }, { 45, -20, -53 }, { 38, -20, -53 }, { 31, -20, -53 }, { -32, -20, -53 }, { -39, -20, -53 }, { -46, -20, -53 }, { -53, -20, -53 }, { -60, -20, -53 }, { 59, -20, -46 }, { 52, -20, -46 }, { 45, -20, -46 }, { 38, -20, -46 }, { 31, -20, -46 }, { -32, -20, -46 }, { -39, -20, -46 }, { -46, -20, -46 }, { -53, -20, -46 }, { -60, -20, -46 }, { 66, -20, -39 }, { 59, -20, -39 }, { 52, -20, -39 }, { 45, -20, -39 }, { 38, -20, -39 }, { 31, -20, -39 }, { 24, -20, -39 }, { -25, -20, -39 }, { -32, -20, -39 }, { -39, -20, -39 }, { -46, -20, -39 }, { -53, -20, -39 }, { -60, -20, -39 }, { 66, -20, -32 }, { 59, -20, -32 }, { 52, -20, -32 }, { 45, -20, -32 }, { 38, -20, -32 }, { 31, -20, -32 }, { 24, -20, -32 }, { -25, -20, -32 }, { -32, -20, -32 }, { -39, -20, -32 }, { -46, -20, -32 }, { -53, -20, -32 }, { -60, -20, -32 }, { -67, -20, -32 }, { 66, -20, -25 }, { 59, -20, -25 }, { 38, -20, -25 }, { 31, -20, -25 }, { -25, -20, -25 }, { -32, -20, -25 }, { -39, -20, -25 }, { -60, -20, -25 }, { -67, -20, -25 }, { 66, -20, -18 }, { 59, -20, -18 }, { 38, -20, -18 }, { 31, -20, -18 }, { 24, -20, -18 }, { 17, -20, -18 }, { -18, -20, -18 }, { -25, -20, -18 }, { -32, -20, -18 }, { -60, -20, -18 }, { -67, -20, -18 }, { 66, -20, -11 }, { 59, -20, -11 }, { 31, -20, -11 }, { 24, -20, -11 }, { 17, -20, -11 }, { -18, -20, -11 }, { -25, -20, -11 }, { -32, -20, -11 }, { -60, -20, -11 }, { -67, -20, -11 }, { 59, -20, -4 }, { 52, -20, -4 }, { 31, -20, -4 }, { 24, -20, -4 }, { 17, -20, -4 }, { -18, -20, -4 }, { -25, -20, -4 }, { -32, -20, -4 }, { -53, -20, -4 }, { -60, -20, -4 }, { 59, -20, 3 }, { 52, -20, 3 }, { 45, -20, 3 }, { 38, -20, 3 }, { 31, -20, 3 }, { -25, -20, 3 }, { -32, -20, 3 }, { -39, -20, 3 }, { -46, -20, 3 }, { -53, -20, 3 }, { -60, -20, 3 }, { 52, -20, 10 }, { 45, -20, 10 }, { 24, -20, 10 }, { 17, -20, 10 }, { 10, -20, 10 }, { -4, -20, 10 }, { -11, -20, 10 }, { -18, -20, 10 }, { -25, -20, 10 }, { -46, -20, 10 }, { -53, -20, 10 }, { 52, -20, 17 }, { 45, -20, 17 }, { 38, -20, 17 }, { 31, -20, 17 }, { 24, -20, 17 }, { 17, -20, 17 }, { 10, -20, 17 }, { 3, -20, 17 }, { -4, -20, 17 }, { -11, -20, 17 }, { -18, -20, 17 }, { -25, -20, 17 }, { -32, -20, 17 }, { -46, -20, 17 }, { -53, -20, 17 }, { 38, -20, 24 }, { 31, -20, 24 }, { 24, -20, 24 }, { 17, -20, 24 }, { 10, -20, 24 }, { 3, -20, 24 }, { -4, -20, 24 }, { -11, -20, 24 }, { -18, -20, 24 }, { -25, -20, 24 }, { -32, -20, 24 }, { -39, -20, 24 }, { 38, -20, 31 }, { 31, -20, 31 }, { 24, -20, 31 }, { 10, -20, 31 }, { 3, -20, 31 }, { -4, -20, 31 }, { -11, -20, 31 }, { -18, -20, 31 }, { -25, -20, 31 }, { -32, -20, 31 }, { -39, -20, 31 }, { 24, -20, 38 }, { 10, -20, 38 }, { 3, -20, 38 }, { -4, -20, 38 }, { -11, -20, 38 }, { -18, -20, 38 }, { -25, -20, 38 }, { 17, -20, 45 }, { 10, -20, 45 }, { 3, -20, 45 }, { -4, -20, 45 }, { -11, -20, 45 }, { -18, -20, 45 }, { -25, -20, 45 }, { 17, -20, 52 }, { 3, -20, 52 }, { -4, -20, 52 }, { -18, -20, 52 }, { 10, -20, 59 }, { 3, -20, 59 }, { -4, -20, 59 }, { -11, -20, 59 }, { -18, -20, 59 }, { 17, -13, -102 }, { 10, -13, -102 }, { 17, -13, -95 }, { 10, -13, -95 }, { 3, -13, -95 }, { -32, -13, -95 }, { 38, -13, -88 }, { 17, -13, -88 }, { 10, -13, -88 }, { 3, -13, -88 }, { -4, -13, -88 }, { -11, -13, -88 }, { -18, -13, -88 }, { -25, -13, -88 }, { -32, -13, -88 }, { -39, -13, -88 }, { 45, -13, -81 }, { 38, -13, -81 }, { 31, -13, -81 }, { 24, -13, -81 }, { 17, -13, -81 }, { 10, -13, -81 }, { 3, -13, -81 }, { -4, -13, -81 }, { -11, -13, -81 }, { -18, -13, -81 }, { -39, -13, -81 }, { -46, -13, -81 }, { 45, -13, -74 }, { 38, -13, -74 }, { -32, -13, -74 }, { -39, -13, -74 }, { -46, -13, -74 }, { 52, -13, -67 }, { 45, -13, -67 }, { 38, -13, -67 }, { -39, -13, -67 }, { -46, -13, -67 }, { -53, -13, -67 }, { 59, -13, -60 }, { 52, -13, -60 }, { 45, -13, -60 }, { 38, -13, -60 }, { 31, -13, -60 }, { -39, -13, -60 }, { -46, -13, -60 }, { -53, -13, -60 }, { -60, -13, -60 }, { 59, -13, -53 }, { 52, -13, -53 }, { 45, -13, -53 }, { 38, -13, -53 }, { -46, -13, -53 }, { -53, -13, -53 }, { -60, -13, -53 }, { 66, -13, -46 }, { 59, -13, -46 }, { 52, -13, -46 }, { 45, -13, -46 }, { 31, -13, -46 }, { 24, -13, -46 }, { -46, -13, -46 }, { -53, -13, -46 }, { -60, -13, -46 }, { -67, -13, -46 }, { 66, -13, -39 }, { 59, -13, -39 }, { 31, -13, -39 }, { 24, -13, -39 }, { 17, -13, -39 }, { -25, -13, -39 }, { -32, -13, -39 }, { -60, -13, -39 }, { -67, -13, -39 }, { 66, -13, -32 }, { 59, -13, -32 }, { 31, -13, -32 }, { 24, -13, -32 }, { 17, -13, -32 }, { -18, -13, -32 }, { -32, -13, -32 }, { -60, -13, -32 }, { -67, -13, -32 }, { 66, -13, -25 }, { 59, -13, -25 }, { 38, -13, -25 }, { 31, -13, -25 }, { 24, -13, -25 }, { -25, -13, -25 }, { -32, -13, -25 }, { -39, -13, -25 }, { -60, -13, -25 }, { -67, -13, -25 }, { 66, -13, -18 }, { 59, -13, -18 }, { 52, -13, -18 }, { 31, -13, -18 }, { 24, -13, -18 }, { -32, -13, -18 }, { -53, -13, -18 }, { -67, -13, -18 }, { 66, -13, -11 }, { 59, -13, -11 }, { 52, -13, -11 }, { 24, -13, -11 }, { 17, -13, -11 }, { -18, -13, -11 }, { -25, -13, -11 }, { -53, -13, -11 }, { -60, -13, -11 }, { -67, -13, -11 }, { 59, -13, -4 }, { 52, -13, -4 }, { 45, -13, -4 }, { 38, -13, -4 }, { 31, -13, -4 }, { 24, -13, -4 }, { 17, -13, -4 }, { 10, -13, -4 }, { -18, -13, -4 }, { -25, -13, -4 }, { -39, -13, -4 }, { -46, -13, -4 }, { -53, -13, -4 }, { -60, -13, -4 }, { 59, -13, 3 }, { 52, -13, 3 }, { 45, -13, 3 }, { 38, -13, 3 }, { 31, -13, 3 }, { 24, -13, 3 }, { 17, -13, 3 }, { 10, -13, 3 }, { 3, -13, 3 }, { -4, -13, 3 }, { -11, -13, 3 }, { -18, -13, 3 }, { -25, -13, 3 }, { -32, -13, 3 }, { -39, -13, 3 }, { -46, -13, 3 }, { -53, -13, 3 }, { -60, -13, 3 }, { 52, -13, 10 }, { 38, -13, 10 }, { 31, -13, 10 }, { 24, -13, 10 }, { 17, -13, 10 }, { 10, -13, 10 }, { 3, -13, 10 }, { -4, -13, 10 }, { -11, -13, 10 }, { -18, -13, 10 }, { -25, -13, 10 }, { -32, -13, 10 }, { -39, -13, 10 }, { -46, -13, 10 }, { -53, -13, 10 }, { 52, -13, 17 }, { 45, -13, 17 }, { 38, -13, 17 }, { 31, -13, 17 }, { 3, -13, 17 }, { -4, -13, 17 }, { -11, -13, 17 }, { -32, -13, 17 }, { -39, -13, 17 }, { -46, -13, 17 }, { -53, -13, 17 }, { 45, -13, 24 }, { 3, -13, 24 }, { -4, -13, 24 }, { -32, -13, 24 }, { -39, -13, 24 }, { -46, -13, 24 }, { 45, -13, 31 }, { 38, -13, 31 }, { 31, -13, 31 }, { 24, -13, 31 }, { 3, -13, 31 }, { -4, -13, 31 }, { -25, -13, 31 }, { -46, -13, 31 }, { 52, -13, 38 }, { 38, -13, 38 }, { 31, -13, 38 }, { 24, -13, 38 }, { 10, -13, 38 }, { 3, -13, 38 }, { -4, -13, 38 }, { -25, -13, 38 }, { -32, -13, 38 }, { -39, -13, 38 }, { 45, -13, 45 }, { 38, -13, 45 }, { 31, -13, 45 }, { 24, -13, 45 }, { 10, -13, 45 }, { 3, -13, 45 }, { -4, -13, 45 }, { -25, -13, 45 }, { -32, -13, 45 }, { -39, -13, 45 }, { -46, -13, 45 }, { 38, -13, 52 }, { 31, -13, 52 }, { 24, -13, 52 }, { 3, -13, 52 }, { -4, -13, 52 }, { -25, -13, 52 }, { -32, -13, 52 }, { -39, -13, 52 }, { 38, -13, 59 }, { 31, -13, 59 }, { 24, -13, 59 }, { 3, -13, 59 }, { -4, -13, 59 }, { -18, -13, 59 }, { -25, -13, 59 }, { -32, -13, 59 }, { -39, -13, 59 }, { 17, -13, 66 }, { 10, -13, 66 }, { 3, -13, 66 }, { -4, -13, 66 }, { -11, -13, 66 }, { -18, -13, 66 }, { -25, -13, 66 }, { 24, -6, -102 }, { 17, -6, -102 }, { 10, -6, -102 }, { 10, -6, -95 }, { 3, -6, -95 }, { -32, -6, -95 }, { 45, -6, -88 }, { 38, -6, -88 }, { 31, -6, -88 }, { 3, -6, -88 }, { -4, -6, -88 }, { -39, -6, -88 }, { 45, -6, -81 }, { 3, -6, -81 }, { -4, -6, -81 }, { -46, -6, -81 }, { 52, -6, -74 }, { 45, -6, -74 }, { 10, -6, -74 }, { 3, -6, -74 }, { -4, -6, -74 }, { -11, -6, -74 }, { -25, -6, -74 }, { -46, -6, -74 }, { -53, -6, -74 }, { 59, -6, -67 }, { 52, -6, -67 }, { 45, -6, -67 }, { 24, -6, -67 }, { 17, -6, -67 }, { 10, -6, -67 }, { -11, -6, -67 }, { -18, -6, -67 }, { -25, -6, -67 }, { -46, -6, -67 }, { -53, -6, -67 }, { 59, -6, -60 }, { 52, -6, -60 }, { 45, -6, -60 }, { 24, -6, -60 }, { 17, -6, -60 }, { 10, -6, -60 }, { -11, -6, -60 }, { -18, -6, -60 }, { -25, -6, -60 }, { -46, -6, -60 }, { -53, -6, -60 }, { -60, -6, -60 }, { 66, -6, -53 }, { 59, -6, -53 }, { 31, -6, -53 }, { 24, -6, -53 }, { 17, -6, -53 }, { 10, -6, -53 }, { -11, -6, -53 }, { -18, -6, -53 }, { -25, -6, -53 }, { -32, -6, -53 }, { -46, -6, -53 }, { -53, -6, -53 }, { -60, -6, -53 }, { 66, -6, -46 }, { 59, -6, -46 }, { 31, -6, -46 }, { 24, -6, -46 }, { 17, -6, -46 }, { -11, -6, -46 }, { -18, -6, -46 }, { -25, -6, -46 }, { -32, -6, -46 }, { -60, -6, -46 }, { -67, -6, -46 }, { 66, -6, -39 }, { 59, -6, -39 }, { 31, -6, -39 }, { 24, -6, -39 }, { -18, -6, -39 }, { -32, -6, -39 }, { -60, -6, -39 }, { -67, -6, -39 }, { 66, -6, -32 }, { 59, -6, -32 }, { 52, -6, -32 }, { 31, -6, -32 }, { 24, -6, -32 }, { 17, -6, -32 }, { -18, -6, -32 }, { -25, -6, -32 }, { -32, -6, -32 }, { -53, -6, -32 }, { -60, -6, -32 }, { -67, -6, -32 }, { 66, -6, -25 }, { 59, -6, -25 }, { 52, -6, -25 }, { -46, -6, -25 }, { -53, -6, -25 }, { -60, -6, -25 }, { -67, -6, -25 }, { 66, -6, -18 }, { 59, -6, -18 }, { 52, -6, -18 }, { 38, -6, -18 }, { -53, -6, -18 }, { -60, -6, -18 }, { -67, -6, -18 }, { 59, -6, -11 }, { 52, -6, -11 }, { 45, -6, -11 }, { 38, -6, -11 }, { 3, -6, -11 }, { -4, -6, -11 }, { -39, -6, -11 }, { -46, -6, -11 }, { -53, -6, -11 }, { -60, -6, -11 }, { -67, -6, -11 }, { 59, -6, -4 }, { 38, -6, -4 }, { 3, -6, -4 }, { -4, -6, -4 }, { -39, -6, -4 }, { -46, -6, -4 }, { -53, -6, -4 }, { -60, -6, -4 }, { 59, -6, 3 }, { 52, -6, 3 }, { 38, -6, 3 }, { 3, -6, 3 }, { -4, -6, 3 }, { -39, -6, 3 }, { -53, -6, 3 }, { -60, -6, 3 }, { 52, -6, 10 }, { 38, -6, 10 }, { 3, -6, 10 }, { -4, -6, 10 }, { -39, -6, 10 }, { -46, -6, 10 }, { -53, -6, 10 }, { -60, -6, 10 }, { 38, -6, 17 }, { 31, -6, 17 }, { 3, -6, 17 }, { -4, -6, 17 }, { -32, -6, 17 }, { -39, -6, 17 }, { 52, -6, 24 }, { 45, -6, 24 }, { 38, -6, 24 }, { 31, -6, 24 }, { 3, -6, 24 }, { -4, -6, 24 }, { -32, -6, 24 }, { -39, -6, 24 }, { -46, -6, 24 }, { -53, -6, 24 }, { 52, -6, 31 }, { 45, -6, 31 }, { 3, -6, 31 }, { -4, -6, 31 }, { -46, -6, 31 }, { -53, -6, 31 }, { 52, -6, 38 }, { 45, -6, 38 }, { 10, -6, 38 }, { 3, -6, 38 }, { -4, -6, 38 }, { -11, -6, 38 }, { -53, -6, 38 }, { 45, -6, 45 }, { 10, -6, 45 }, { 3, -6, 45 }, { -4, -6, 45 }, { -11, -6, 45 }, { -46, -6, 45 }, { 45, -6, 52 }, { 38, -6, 52 }, { 10, -6, 52 }, { 3, -6, 52 }, { -4, -6, 52 }, { -11, -6, 52 }, { -39, -6, 52 }, { -46, -6, 52 }, { 38, -6, 59 }, { 31, -6, 59 }, { 24, -6, 59 }, { 3, -6, 59 }, { -4, -6, 59 }, { -25, -6, 59 }, { -32, -6, 59 }, { -39, -6, 59 }, { 24, -6, 66 }, { 17, -6, 66 }, { 10, -6, 66 }, { 3, -6, 66 }, { -4, -6, 66 }, { -11, -6, 66 }, { -18, -6, 66 }, { -25, -6, 66 }, { -32, -6, 66 }, { 24, 1, -102 }, { 31, 1, -95 }, { 3, 1, -95 }, { -32, 1, -95 }, { 45, 1, -88 }, { 38, 1, -88 }, { 31, 1, -88 }, { 10, 1, -88 }, { 3, 1, -88 }, { -4, 1, -88 }, { -11, 1, -88 }, { -32, 1, -88 }, { -39, 1, -88 }, { 45, 1, -81 }, { 10, 1, -81 }, { 3, 1, -81 }, { -4, 1, -81 }, { -11, 1, -81 }, { -46, 1, -81 }, { 52, 1, -74 }, { 45, 1, -74 }, { 3, 1, -74 }, { -4, 1, -74 }, { -46, 1, -74 }, { -53, 1, -74 }, { 59, 1, -67 }, { 52, 1, -67 }, { 45, 1, -67 }, { 17, 1, -67 }, { 10, 1, -67 }, { 3, 1, -67 }, { -4, 1, -67 }, { -46, 1, -67 }, { -53, 1, -67 }, { 59, 1, -60 }, { 52, 1, -60 }, { 17, 1, -60 }, { 10, 1, -60 }, { -11, 1, -60 }, { -46, 1, -60 }, { -53, 1, -60 }, { -60, 1, -60 }, { 66, 1, -53 }, { 59, 1, -53 }, { 24, 1, -53 }, { 17, 1, -53 }, { 10, 1, -53 }, { -11, 1, -53 }, { -18, 1, -53 }, { -25, 1, -53 }, { -32, 1, -53 }, { -60, 1, -53 }, { 66, 1, -46 }, { 59, 1, -46 }, { 52, 1, -46 }, { 10, 1, -46 }, { -11, 1, -46 }, { -18, 1, -46 }, { -60, 1, -46 }, { -67, 1, -46 }, { 66, 1, -39 }, { 59, 1, -39 }, { 52, 1, -39 }, { 31, 1, -39 }, { 24, 1, -39 }, { 17, 1, -39 }, { -11, 1, -39 }, { -18, 1, -39 }, { -25, 1, -39 }, { -46, 1, -39 }, { -53, 1, -39 }, { -60, 1, -39 }, { -67, 1, -39 }, { 66, 1, -32 }, { 59, 1, -32 }, { 52, 1, -32 }, { -46, 1, -32 }, { -53, 1, -32 }, { -60, 1, -32 }, { -67, 1, -32 }, { 66, 1, -25 }, { 59, 1, -25 }, { 38, 1, -25 }, { -53, 1, -25 }, { -60, 1, -25 }, { -67, 1, -25 }, { 66, 1, -18 }, { 45, 1, -18 }, { 38, 1, -18 }, { 31, 1, -18 }, { -39, 1, -18 }, { -46, 1, -18 }, { -67, 1, -18 }, { 59, 1, -11 }, { 52, 1, -11 }, { 38, 1, -11 }, { 31, 1, -11 }, { -39, 1, -11 }, { -46, 1, -11 }, { -67, 1, -11 }, { 59, 1, -4 }, { 52, 1, -4 }, { 45, 1, -4 }, { 38, 1, -4 }, { -39, 1, -4 }, { -53, 1, -4 }, { -60, 1, -4 }, { 59, 1, 3 }, { 52, 1, 3 }, { 45, 1, 3 }, { 38, 1, 3 }, { -39, 1, 3 }, { -46, 1, 3 }, { -53, 1, 3 }, { -60, 1, 3 }, { 52, 1, 10 }, { 45, 1, 10 }, { 38, 1, 10 }, { -39, 1, 10 }, { -46, 1, 10 }, { -53, 1, 10 }, { 52, 1, 17 }, { 45, 1, 17 }, { 38, 1, 17 }, { 31, 1, 17 }, { -32, 1, 17 }, { -39, 1, 17 }, { -46, 1, 17 }, { -53, 1, 17 }, { 52, 1, 24 }, { 45, 1, 24 }, { 38, 1, 24 }, { 31, 1, 24 }, { -32, 1, 24 }, { -39, 1, 24 }, { -46, 1, 24 }, { -53, 1, 24 }, { 52, 1, 31 }, { 38, 1, 31 }, { 31, 1, 31 }, { -32, 1, 31 }, { -39, 1, 31 }, { -53, 1, 31 }, { 52, 1, 38 }, { 3, 1, 38 }, { -4, 1, 38 }, { -46, 1, 38 }, { -53, 1, 38 }, { 45, 1, 45 }, { 38, 1, 45 }, { 10, 1, 45 }, { 3, 1, 45 }, { -4, 1, 45 }, { -11, 1, 45 }, { -39, 1, 45 }, { -46, 1, 45 }, { 45, 1, 52 }, { 38, 1, 52 }, { 24, 1, 52 }, { 10, 1, 52 }, { 3, 1, 52 }, { -4, 1, 52 }, { -11, 1, 52 }, { -25, 1, 52 }, { -32, 1, 52 }, { -39, 1, 52 }, { -46, 1, 52 }, { 38, 1, 59 }, { 31, 1, 59 }, { 24, 1, 59 }, { 10, 1, 59 }, { 3, 1, 59 }, { -4, 1, 59 }, { -25, 1, 59 }, { -32, 1, 59 }, { -39, 1, 59 }, { 24, 1, 66 }, { 17, 1, 66 }, { 10, 1, 66 }, { 3, 1, 66 }, { -4, 1, 66 }, { -11, 1, 66 }, { -18, 1, 66 }, { -25, 1, 66 }, { 31, 8, -95 }, { -4, 8, -95 }, { -32, 8, -95 }, { 45, 8, -88 }, { 38, 8, -88 }, { 31, 8, -88 }, { 3, 8, -88 }, { -4, 8, -88 }, { -11, 8, -88 }, { -32, 8, -88 }, { -39, 8, -88 }, { 45, 8, -81 }, { 10, 8, -81 }, { 3, 8, -81 }, { -4, 8, -81 }, { -11, 8, -81 }, { -39, 8, -81 }, { -46, 8, -81 }, { 52, 8, -74 }, { 45, 8, -74 }, { 10, 8, -74 }, { 3, 8, -74 }, { -4, 8, -74 }, { -11, 8, -74 }, { -46, 8, -74 }, { -53, 8, -74 }, { 59, 8, -67 }, { 52, 8, -67 }, { 45, 8, -67 }, { 24, 8, -67 }, { 17, 8, -67 }, { 10, 8, -67 }, { 3, 8, -67 }, { -4, 8, -67 }, { -11, 8, -67 }, { -18, 8, -67 }, { -25, 8, -67 }, { -46, 8, -67 }, { -53, 8, -67 }, { 59, 8, -60 }, { 52, 8, -60 }, { 45, 8, -60 }, { 24, 8, -60 }, { 17, 8, -60 }, { 10, 8, -60 }, { 3, 8, -60 }, { -4, 8, -60 }, { -11, 8, -60 }, { -18, 8, -60 }, { -25, 8, -60 }, { -46, 8, -60 }, { -53, 8, -60 }, { -60, 8, -60 }, { 66, 8, -53 }, { 59, 8, -53 }, { 52, 8, -53 }, { 10, 8, -53 }, { -4, 8, -53 }, { -11, 8, -53 }, { -18, 8, -53 }, { -25, 8, -53 }, { -46, 8, -53 }, { -53, 8, -53 }, { -60, 8, -53 }, { 66, 8, -46 }, { 59, 8, -46 }, { 52, 8, -46 }, { -4, 8, -46 }, { -53, 8, -46 }, { -60, 8, -46 }, { -67, 8, -46 }, { 66, 8, -39 }, { 59, 8, -39 }, { 52, 8, -39 }, { -46, 8, -39 }, { -53, 8, -39 }, { -60, 8, -39 }, { -67, 8, -39 }, { 66, 8, -32 }, { 59, 8, -32 }, { 52, 8, -32 }, { 45, 8, -32 }, { -60, 8, -32 }, { -67, 8, -32 }, { 66, 8, -25 }, { 59, 8, -25 }, { 52, 8, -25 }, { 45, 8, -25 }, { 38, 8, -25 }, { 31, 8, -25 }, { -46, 8, -25 }, { -60, 8, -25 }, { -67, 8, -25 }, { 66, 8, -18 }, { 59, 8, -18 }, { 52, 8, -18 }, { 45, 8, -18 }, { 38, 8, -18 }, { -39, 8, -18 }, { -46, 8, -18 }, { -53, 8, -18 }, { -60, 8, -18 }, { -67, 8, -18 }, { 59, 8, -11 }, { 52, 8, -11 }, { 45, 8, -11 }, { 38, 8, -11 }, { -39, 8, -11 }, { -46, 8, -11 }, { -53, 8, -11 }, { -60, 8, -11 }, { 59, 8, -4 }, { 52, 8, -4 }, { 45, 8, -4 }, { 38, 8, -4 }, { -39, 8, -4 }, { -46, 8, -4 }, { -53, 8, -4 }, { -60, 8, -4 }, { 59, 8, 3 }, { 45, 8, 3 }, { 38, 8, 3 }, { -39, 8, 3 }, { -46, 8, 3 }, { -53, 8, 3 }, { -60, 8, 3 }, { 59, 8, 10 }, { 52, 8, 10 }, { 38, 8, 10 }, { 31, 8, 10 }, { -32, 8, 10 }, { -39, 8, 10 }, { -46, 8, 10 }, { -53, 8, 10 }, { -60, 8, 10 }, { 52, 8, 17 }, { 45, 8, 17 }, { 38, 8, 17 }, { 31, 8, 17 }, { -32, 8, 17 }, { -39, 8, 17 }, { -46, 8, 17 }, { -53, 8, 17 }, { -60, 8, 17 }, { 52, 8, 24 }, { 38, 8, 24 }, { 31, 8, 24 }, { -32, 8, 24 }, { -39, 8, 24 }, { -46, 8, 24 }, { -53, 8, 24 }, { 52, 8, 31 }, { -53, 8, 31 }, { 52, 8, 38 }, { 45, 8, 38 }, { 38, 8, 38 }, { 3, 8, 38 }, { -4, 8, 38 }, { -11, 8, 38 }, { -39, 8, 38 }, { -46, 8, 38 }, { -53, 8, 38 }, { 45, 8, 45 }, { 38, 8, 45 }, { 10, 8, 45 }, { 3, 8, 45 }, { -4, 8, 45 }, { -11, 8, 45 }, { -39, 8, 45 }, { -46, 8, 45 }, { 45, 8, 52 }, { 38, 8, 52 }, { 31, 8, 52 }, { 24, 8, 52 }, { 10, 8, 52 }, { 3, 8, 52 }, { -4, 8, 52 }, { -11, 8, 52 }, { -25, 8, 52 }, { -32, 8, 52 }, { -39, 8, 52 }, { -46, 8, 52 }, { 38, 8, 59 }, { 31, 8, 59 }, { 24, 8, 59 }, { 10, 8, 59 }, { 3, 8, 59 }, { -4, 8, 59 }, { -11, 8, 59 }, { -25, 8, 59 }, { -32, 8, 59 }, { -39, 8, 59 }, { 24, 8, 66 }, { 17, 8, 66 }, { 10, 8, 66 }, { -4, 8, 66 }, { -11, 8, 66 }, { -18, 8, 66 }, { -25, 8, 66 }, { 31, 15, -95 }, { 24, 15, -95 }, { 3, 15, -95 }, { 38, 15, -88 }, { 31, 15, -88 }, { 3, 15, -88 }, { -4, 15, -88 }, { -39, 15, -88 }, { 45, 15, -81 }, { 38, 15, -81 }, { 3, 15, -81 }, { -4, 15, -81 }, { -39, 15, -81 }, { -46, 15, -81 }, { 52, 15, -74 }, { 45, 15, -74 }, { 38, 15, -74 }, { 3, 15, -74 }, { -4, 15, -74 }, { -11, 15, -74 }, { -39, 15, -74 }, { -46, 15, -74 }, { -53, 15, -74 }, { 59, 15, -67 }, { 52, 15, -67 }, { 45, 15, -67 }, { 38, 15, -67 }, { 17, 15, -67 }, { 10, 15, -67 }, { 3, 15, -67 }, { -4, 15, -67 }, { -11, 15, -67 }, { -18, 15, -67 }, { -46, 15, -67 }, { -53, 15, -67 }, { 59, 15, -60 }, { 52, 15, -60 }, { 45, 15, -60 }, { 17, 15, -60 }, { 10, 15, -60 }, { 3, 15, -60 }, { -4, 15, -60 }, { -11, 15, -60 }, { -18, 15, -60 }, { -46, 15, -60 }, { -53, 15, -60 }, { -60, 15, -60 }, { 59, 15, -53 }, { 52, 15, -53 }, { 45, 15, -53 }, { 3, 15, -53 }, { -4, 15, -53 }, { -11, 15, -53 }, { -18, 15, -53 }, { -46, 15, -53 }, { -53, 15, -53 }, { -60, 15, -53 }, { 66, 15, -46 }, { 59, 15, -46 }, { 52, 15, -46 }, { 3, 15, -46 }, { -4, 15, -46 }, { -46, 15, -46 }, { -53, 15, -46 }, { -60, 15, -46 }, { -67, 15, -46 }, { 66, 15, -39 }, { 59, 15, -39 }, { 45, 15, -39 }, { -53, 15, -39 }, { -60, 15, -39 }, { -67, 15, -39 }, { 66, 15, -32 }, { 59, 15, -32 }, { 52, 15, -32 }, { 45, 15, -32 }, { 38, 15, -32 }, { -39, 15, -32 }, { -46, 15, -32 }, { -53, 15, -32 }, { -60, 15, -32 }, { -67, 15, -32 }, { 66, 15, -25 }, { 59, 15, -25 }, { 52, 15, -25 }, { 45, 15, -25 }, { 38, 15, -25 }, { 31, 15, -25 }, { -32, 15, -25 }, { -39, 15, -25 }, { -46, 15, -25 }, { -53, 15, -25 }, { -60, 15, -25 }, { -67, 15, -25 }, { 66, 15, -18 }, { 59, 15, -18 }, { 52, 15, -18 }, { 45, 15, -18 }, { 38, 15, -18 }, { -39, 15, -18 }, { -46, 15, -18 }, { -53, 15, -18 }, { -60, 15, -18 }, { -67, 15, -18 }, { 66, 15, -11 }, { 52, 15, -11 }, { 45, 15, -11 }, { 38, 15, -11 }, { -39, 15, -11 }, { -46, 15, -11 }, { -53, 15, -11 }, { -60, 15, -11 }, { -67, 15, -11 }, { 59, 15, -4 }, { 38, 15, -4 }, { -39, 15, -4 }, { -60, 15, -4 }, { -67, 15, -4 }, { 59, 15, 3 }, { -39, 15, 3 }, { -60, 15, 3 }, { 59, 15, 10 }, { 52, 15, 10 }, { -53, 15, 10 }, { -60, 15, 10 }, { 59, 15, 17 }, { 52, 15, 17 }, { -53, 15, 17 }, { -60, 15, 17 }, { -53, 15, 24 }, { 52, 15, 31 }, { 45, 15, 31 }, { 3, 15, 31 }, { -4, 15, 31 }, { -39, 15, 31 }, { -46, 15, 31 }, { -53, 15, 31 }, { 45, 15, 38 }, { 38, 15, 38 }, { 10, 15, 38 }, { 3, 15, 38 }, { -4, 15, 38 }, { -11, 15, 38 }, { -46, 15, 38 }, { -53, 15, 38 }, { 45, 15, 45 }, { 38, 15, 45 }, { 24, 15, 45 }, { 10, 15, 45 }, { 3, 15, 45 }, { -4, 15, 45 }, { -11, 15, 45 }, { -46, 15, 45 }, { 38, 15, 52 }, { 31, 15, 52 }, { 24, 15, 52 }, { 10, 15, 52 }, { 3, 15, 52 }, { -4, 15, 52 }, { -11, 15, 52 }, { -25, 15, 52 }, { -32, 15, 52 }, { -39, 15, 52 }, { 31, 15, 59 }, { 24, 15, 59 }, { 3, 15, 59 }, { -4, 15, 59 }, { -18, 15, 59 }, { -25, 15, 59 }, { -32, 15, 59 }, { 17, 15, 66 }, { 10, 15, 66 }, { -4, 15, 66 }, { -11, 15, 66 }, { -18, 15, 66 }, { -25, 15, 66 }, { 24, 22, -95 }, { 3, 22, -95 }, { 38, 22, -88 }, { 31, 22, -88 }, { 24, 22, -88 }, { -4, 22, -88 }, { -32, 22, -88 }, { -39, 22, -88 }, { 45, 22, -81 }, { 31, 22, -81 }, { 24, 22, -81 }, { 3, 22, -81 }, { -4, 22, -81 }, { -32, 22, -81 }, { -39, 22, -81 }, { -46, 22, -81 }, { 52, 22, -74 }, { 45, 22, -74 }, { 38, 22, -74 }, { 10, 22, -74 }, { 3, 22, -74 }, { -4, 22, -74 }, { -32, 22, -74 }, { -46, 22, -74 }, { -53, 22, -74 }, { 52, 22, -67 }, { 45, 22, -67 }, { 17, 22, -67 }, { 10, 22, -67 }, { 3, 22, -67 }, { -4, 22, -67 }, { -11, 22, -67 }, { -18, 22, -67 }, { -46, 22, -67 }, { -53, 22, -67 }, { 59, 22, -60 }, { 52, 22, -60 }, { 45, 22, -60 }, { 17, 22, -60 }, { 3, 22, -60 }, { -4, 22, -60 }, { -11, 22, -60 }, { -18, 22, -60 }, { -25, 22, -60 }, { -46, 22, -60 }, { -53, 22, -60 }, { -60, 22, -60 }, { 59, 22, -53 }, { 45, 22, -53 }, { 3, 22, -53 }, { -4, 22, -53 }, { -46, 22, -53 }, { -53, 22, -53 }, { -60, 22, -53 }, { 66, 22, -46 }, { 59, 22, -46 }, { 52, 22, -46 }, { 3, 22, -46 }, { -4, 22, -46 }, { -46, 22, -46 }, { -53, 22, -46 }, { -60, 22, -46 }, { -67, 22, -46 }, { 66, 22, -39 }, { 59, 22, -39 }, { 52, 22, -39 }, { 45, 22, -39 }, { 3, 22, -39 }, { -4, 22, -39 }, { -53, 22, -39 }, { -60, 22, -39 }, { -67, 22, -39 }, { 66, 22, -32 }, { 59, 22, -32 }, { 52, 22, -32 }, { -46, 22, -32 }, { -53, 22, -32 }, { -60, 22, -32 }, { -67, 22, -32 }, { 66, 22, -25 }, { 59, 22, -25 }, { 52, 22, -25 }, { 45, 22, -25 }, { 38, 22, -25 }, { -39, 22, -25 }, { -46, 22, -25 }, { -53, 22, -25 }, { -60, 22, -25 }, { -67, 22, -25 }, { 66, 22, -18 }, { 59, 22, -18 }, { -39, 22, -18 }, { -53, 22, -18 }, { -60, 22, -18 }, { -67, 22, -18 }, { 66, 22, -11 }, { -67, 22, -11 }, { 59, 22, -4 }, { -60, 22, -4 }, { -67, 22, -4 }, { 59, 22, 3 }, { 45, 22, 3 }, { 59, 22, 10 }, { 52, 22, 10 }, { 45, 22, 10 }, { -46, 22, 10 }, { -53, 22, 10 }, { -60, 22, 10 }, { 52, 22, 17 }, { 45, 22, 17 }, { 3, 22, 17 }, { -4, 22, 17 }, { -46, 22, 17 }, { -53, 22, 17 }, { -60, 22, 17 }, { 52, 22, 24 }, { 45, 22, 24 }, { 3, 22, 24 }, { -4, 22, 24 }, { -46, 22, 24 }, { -53, 22, 24 }, { 52, 22, 31 }, { 10, 22, 31 }, { 3, 22, 31 }, { -4, 22, 31 }, { -11, 22, 31 }, { -46, 22, 31 }, { -53, 22, 31 }, { 45, 22, 38 }, { 10, 22, 38 }, { 3, 22, 38 }, { -4, 22, 38 }, { -11, 22, 38 }, { -46, 22, 38 }, { 45, 22, 45 }, { 38, 22, 45 }, { 31, 22, 45 }, { 24, 22, 45 }, { 10, 22, 45 }, { 3, 22, 45 }, { -4, 22, 45 }, { -11, 22, 45 }, { -25, 22, 45 }, { -32, 22, 45 }, { -39, 22, 45 }, { -46, 22, 45 }, { 38, 22, 52 }, { 31, 22, 52 }, { 24, 22, 52 }, { 3, 22, 52 }, { -4, 22, 52 }, { -25, 22, 52 }, { -32, 22, 52 }, { -39, 22, 52 }, { 24, 22, 59 }, { 17, 22, 59 }, { 3, 22, 59 }, { -4, 22, 59 }, { -18, 22, 59 }, { -25, 22, 59 }, { 10, 22, 66 }, { -11, 22, 66 }, { -18, 22, 66 }, { 31, 29, -88 }, { 24, 29, -88 }, { 17, 29, -88 }, { 3, 29, -88 }, { -25, 29, -88 }, { -32, 29, -88 }, { 45, 29, -81 }, { 24, 29, -81 }, { 3, 29, -81 }, { -4, 29, -81 }, { -32, 29, -81 }, { -39, 29, -81 }, { 52, 29, -74 }, { 45, 29, -74 }, { 24, 29, -74 }, { 10, 29, -74 }, { 3, 29, -74 }, { -4, 29, -74 }, { -11, 29, -74 }, { -18, 29, -74 }, { -32, 29, -74 }, { -46, 29, -74 }, { 52, 29, -67 }, { 45, 29, -67 }, { 10, 29, -67 }, { 3, 29, -67 }, { -4, 29, -67 }, { -11, 29, -67 }, { -18, 29, -67 }, { -32, 29, -67 }, { -46, 29, -67 }, { -53, 29, -67 }, { 59, 29, -60 }, { 52, 29, -60 }, { 45, 29, -60 }, { 3, 29, -60 }, { -4, 29, -60 }, { -11, 29, -60 }, { -46, 29, -60 }, { -53, 29, -60 }, { -60, 29, -60 }, { 59, 29, -53 }, { 52, 29, -53 }, { 10, 29, -53 }, { 3, 29, -53 }, { -4, 29, -53 }, { -53, 29, -53 }, { -60, 29, -53 }, { 59, 29, -46 }, { 3, 29, -46 }, { -4, 29, -46 }, { -53, 29, -46 }, { -60, 29, -46 }, { 66, 29, -39 }, { 59, 29, -39 }, { 52, 29, -39 }, { 3, 29, -39 }, { -4, 29, -39 }, { -53, 29, -39 }, { -60, 29, -39 }, { -67, 29, -39 }, { 66, 29, -32 }, { 59, 29, -32 }, { 3, 29, -32 }, { -4, 29, -32 }, { -60, 29, -32 }, { -67, 29, -32 }, { 66, 29, -25 }, { 59, 29, -25 }, { 3, 29, -25 }, { -4, 29, -25 }, { -60, 29, -25 }, { -67, 29, -25 }, { 66, 29, -18 }, { 59, 29, -18 }, { 3, 29, -18 }, { -4, 29, -18 }, { -60, 29, -18 }, { -67, 29, -18 }, { 66, 29, -11 }, { 59, 29, -11 }, { 3, 29, -11 }, { -4, 29, -11 }, { -60, 29, -11 }, { -67, 29, -11 }, { 59, 29, -4 }, { 52, 29, -4 }, { 3, 29, -4 }, { -4, 29, -4 }, { -60, 29, -4 }, { 59, 29, 3 }, { 45, 29, 3 }, { 38, 29, 3 }, { 3, 29, 3 }, { -4, 29, 3 }, { -39, 29, 3 }, { -46, 29, 3 }, { -60, 29, 3 }, { 52, 29, 10 }, { 45, 29, 10 }, { 38, 29, 10 }, { 3, 29, 10 }, { -4, 29, 10 }, { -39, 29, 10 }, { -46, 29, 10 }, { -53, 29, 10 }, { -60, 29, 10 }, { 52, 29, 17 }, { 45, 29, 17 }, { 38, 29, 17 }, { 10, 29, 17 }, { 3, 29, 17 }, { -4, 29, 17 }, { -39, 29, 17 }, { -46, 29, 17 }, { -53, 29, 17 }, { 52, 29, 24 }, { 45, 29, 24 }, { 10, 29, 24 }, { 3, 29, 24 }, { -4, 29, 24 }, { -11, 29, 24 }, { -53, 29, 24 }, { 45, 29, 31 }, { 10, 29, 31 }, { 3, 29, 31 }, { -4, 29, 31 }, { -11, 29, 31 }, { -53, 29, 31 }, { 45, 29, 38 }, { 38, 29, 38 }, { 31, 29, 38 }, { 24, 29, 38 }, { 10, 29, 38 }, { 3, 29, 38 }, { -4, 29, 38 }, { -32, 29, 38 }, { -46, 29, 38 }, { 38, 29, 45 }, { 31, 29, 45 }, { 24, 29, 45 }, { 3, 29, 45 }, { -4, 29, 45 }, { -25, 29, 45 }, { -32, 29, 45 }, { -39, 29, 45 }, { 31, 29, 52 }, { 24, 29, 52 }, { 17, 29, 52 }, { 3, 29, 52 }, { -4, 29, 52 }, { -18, 29, 52 }, { -25, 29, 52 }, { -32, 29, 52 }, { 17, 29, 59 }, { 10, 29, 59 }, { 3, 29, 59 }, { -4, 29, 59 }, { -11, 29, 59 }, { -18, 29, 59 }, { -25, 29, 59 }, { 31, 36, -88 }, { 24, 36, -88 }, { 17, 36, -88 }, { 10, 36, -88 }, { 3, 36, -88 }, { -11, 36, -88 }, { -18, 36, -88 }, { -25, 36, -88 }, { 38, 36, -81 }, { 31, 36, -81 }, { 24, 36, -81 }, { 10, 36, -81 }, { 3, 36, -81 }, { -4, 36, -81 }, { -11, 36, -81 }, { -39, 36, -81 }, { 45, 36, -74 }, { 38, 36, -74 }, { 24, 36, -74 }, { 10, 36, -74 }, { 3, 36, -74 }, { -4, 36, -74 }, { -11, 36, -74 }, { -18, 36, -74 }, { -32, 36, -74 }, { -46, 36, -74 }, { 52, 36, -67 }, { 45, 36, -67 }, { 24, 36, -67 }, { 3, 36, -67 }, { -4, 36, -67 }, { -11, 36, -67 }, { -32, 36, -67 }, { -46, 36, -67 }, { -53, 36, -67 }, { 59, 36, -60 }, { 52, 36, -60 }, { 45, 36, -60 }, { 10, 36, -60 }, { 3, 36, -60 }, { -4, 36, -60 }, { -46, 36, -60 }, { -53, 36, -60 }, { -60, 36, -60 }, { 59, 36, -53 }, { 52, 36, -53 }, { 10, 36, -53 }, { 3, 36, -53 }, { -4, 36, -53 }, { -11, 36, -53 }, { -53, 36, -53 }, { -60, 36, -53 }, { 59, 36, -46 }, { 10, 36, -46 }, { 3, 36, -46 }, { -4, 36, -46 }, { -11, 36, -46 }, { -53, 36, -46 }, { -60, 36, -46 }, { 59, 36, -39 }, { 10, 36, -39 }, { 3, 36, -39 }, { -4, 36, -39 }, { -11, 36, -39 }, { -53, 36, -39 }, { -60, 36, -39 }, { -67, 36, -39 }, { 66, 36, -32 }, { 59, 36, -32 }, { 3, 36, -32 }, { -4, 36, -32 }, { -67, 36, -32 }, { 66, 36, -25 }, { 59, 36, -25 }, { 45, 36, -25 }, { 3, 36, -25 }, { -4, 36, -25 }, { -60, 36, -25 }, { -67, 36, -25 }, { 59, 36, -18 }, { 52, 36, -18 }, { 45, 36, -18 }, { 3, 36, -18 }, { -4, 36, -18 }, { -53, 36, -18 }, { -60, 36, -18 }, { -67, 36, -18 }, { 59, 36, -11 }, { 3, 36, -11 }, { -4, 36, -11 }, { -46, 36, -11 }, { -53, 36, -11 }, { 59, 36, -4 }, { 52, 36, -4 }, { 3, 36, -4 }, { -4, 36, -4 }, { -60, 36, -4 }, { 59, 36, 3 }, { 52, 36, 3 }, { 45, 36, 3 }, { 38, 36, 3 }, { 3, 36, 3 }, { -4, 36, 3 }, { -39, 36, 3 }, { -46, 36, 3 }, { -53, 36, 3 }, { -60, 36, 3 }, { 52, 36, 10 }, { 45, 36, 10 }, { 10, 36, 10 }, { 3, 36, 10 }, { -4, 36, 10 }, { -11, 36, 10 }, { -39, 36, 10 }, { -46, 36, 10 }, { -53, 36, 10 }, { 52, 36, 17 }, { 10, 36, 17 }, { 3, 36, 17 }, { -4, 36, 17 }, { -11, 36, 17 }, { -46, 36, 17 }, { -53, 36, 17 }, { 24, 36, 24 }, { 3, 36, 24 }, { -4, 36, 24 }, { -11, 36, 24 }, { -39, 36, 24 }, { -46, 36, 24 }, { -53, 36, 24 }, { 45, 36, 31 }, { 38, 36, 31 }, { 31, 36, 31 }, { 24, 36, 31 }, { 3, 36, 31 }, { -4, 36, 31 }, { -25, 36, 31 }, { -39, 36, 31 }, { -46, 36, 31 }, { 38, 36, 38 }, { 31, 36, 38 }, { 24, 36, 38 }, { 3, 36, 38 }, { -4, 36, 38 }, { -25, 36, 38 }, { -32, 36, 38 }, { -39, 36, 38 }, { 31, 36, 45 }, { 24, 36, 45 }, { 17, 36, 45 }, { 3, 36, 45 }, { -4, 36, 45 }, { -25, 36, 45 }, { -32, 36, 45 }, { 24, 36, 52 }, { 17, 36, 52 }, { 3, 36, 52 }, { -4, 36, 52 }, { -18, 36, 52 }, { -25, 36, 52 }, { 10, 36, 59 }, { -11, 36, 59 }, { -18, 43, -88 }, { 31, 43, -81 }, { 24, 43, -81 }, { 17, 43, -81 }, { 10, 43, -81 }, { 3, 43, -81 }, { -11, 43, -81 }, { -18, 43, -81 }, { -25, 43, -81 }, { -32, 43, -81 }, { 45, 43, -74 }, { 38, 43, -74 }, { 31, 43, -74 }, { 24, 43, -74 }, { 10, 43, -74 }, { 3, 43, -74 }, { -4, 43, -74 }, { -11, 43, -74 }, { -25, 43, -74 }, { -32, 43, -74 }, { -39, 43, -74 }, { -46, 43, -74 }, { 52, 43, -67 }, { 45, 43, -67 }, { 38, 43, -67 }, { 31, 43, -67 }, { 24, 43, -67 }, { 3, 43, -67 }, { -4, 43, -67 }, { -25, 43, -67 }, { -32, 43, -67 }, { -39, 43, -67 }, { -46, 43, -67 }, { 52, 43, -60 }, { 45, 43, -60 }, { 38, 43, -60 }, { 31, 43, -60 }, { 3, 43, -60 }, { -4, 43, -60 }, { -46, 43, -60 }, { -53, 43, -60 }, { 59, 43, -53 }, { 52, 43, -53 }, { 38, 43, -53 }, { 31, 43, -53 }, { 10, 43, -53 }, { 3, 43, -53 }, { -4, 43, -53 }, { -11, 43, -53 }, { -39, 43, -53 }, { -53, 43, -53 }, { -60, 43, -53 }, { 59, 43, -46 }, { 52, 43, -46 }, { 45, 43, -46 }, { 38, 43, -46 }, { 31, 43, -46 }, { 10, 43, -46 }, { 3, 43, -46 }, { -4, 43, -46 }, { -11, 43, -46 }, { -32, 43, -46 }, { -39, 43, -46 }, { -46, 43, -46 }, { -60, 43, -46 }, { 59, 43, -39 }, { 52, 43, -39 }, { 45, 43, -39 }, { 38, 43, -39 }, { 31, 43, -39 }, { 10, 43, -39 }, { 3, 43, -39 }, { -4, 43, -39 }, { -11, 43, -39 }, { -39, 43, -39 }, { -46, 43, -39 }, { -53, 43, -39 }, { -60, 43, -39 }, { 59, 43, -32 }, { 52, 43, -32 }, { 45, 43, -32 }, { 38, 43, -32 }, { 10, 43, -32 }, { 3, 43, -32 }, { -4, 43, -32 }, { -11, 43, -32 }, { -39, 43, -32 }, { -46, 43, -32 }, { -60, 43, -32 }, { 59, 43, -25 }, { 52, 43, -25 }, { 10, 43, -25 }, { 3, 43, -25 }, { -4, 43, -25 }, { -11, 43, -25 }, { -46, 43, -25 }, { -53, 43, -25 }, { -60, 43, -25 }, { 59, 43, -18 }, { 52, 43, -18 }, { 45, 43, -18 }, { 38, 43, -18 }, { 10, 43, -18 }, { 3, 43, -18 }, { -4, 43, -18 }, { -11, 43, -18 }, { -53, 43, -18 }, { -60, 43, -18 }, { 59, 43, -11 }, { 52, 43, -11 }, { 10, 43, -11 }, { 3, 43, -11 }, { -4, 43, -11 }, { -11, 43, -11 }, { -53, 43, -11 }, { -60, 43, -11 }, { 45, 43, -4 }, { 10, 43, -4 }, { 3, 43, -4 }, { -4, 43, -4 }, { -11, 43, -4 }, { -53, 43, -4 }, { 52, 43, 3 }, { 45, 43, 3 }, { 10, 43, 3 }, { 3, 43, 3 }, { -4, 43, 3 }, { -11, 43, 3 }, { -39, 43, 3 }, { -46, 43, 3 }, { -53, 43, 3 }, { 52, 43, 10 }, { 45, 43, 10 }, { 3, 43, 10 }, { -4, 43, 10 }, { -11, 43, 10 }, { -46, 43, 10 }, { -53, 43, 10 }, { 45, 43, 17 }, { 24, 43, 17 }, { 10, 43, 17 }, { 3, 43, 17 }, { -4, 43, 17 }, { -25, 43, 17 }, { -39, 43, 17 }, { -46, 43, 17 }, { 45, 43, 24 }, { 31, 43, 24 }, { 24, 43, 24 }, { 3, 43, 24 }, { -4, 43, 24 }, { -25, 43, 24 }, { -39, 43, 24 }, { -46, 43, 24 }, { 38, 43, 31 }, { 31, 43, 31 }, { 24, 43, 31 }, { 3, 43, 31 }, { -4, 43, 31 }, { -25, 43, 31 }, { -32, 43, 31 }, { -39, 43, 31 }, { 31, 43, 38 }, { 24, 43, 38 }, { 3, 43, 38 }, { -4, 43, 38 }, { -18, 43, 38 }, { -25, 43, 38 }, { -32, 43, 38 }, { 24, 43, 45 }, { 17, 43, 45 }, { 10, 43, 45 }, { 3, 43, 45 }, { -4, 43, 45 }, { -18, 43, 45 }, { -25, 43, 45 }, { 10, 43, 52 }, { -4, 43, 52 }, { -11, 43, 52 }, { 17, 50, -81 }, { 10, 50, -81 }, { 31, 50, -74 }, { 24, 50, -74 }, { 17, 50, -74 }, { 10, 50, -74 }, { 3, 50, -74 }, { -4, 50, -74 }, { -11, 50, -74 }, { -18, 50, -74 }, { -25, 50, -74 }, { -32, 50, -74 }, { 45, 50, -67 }, { 38, 50, -67 }, { 31, 50, -67 }, { 24, 50, -67 }, { 17, 50, -67 }, { 3, 50, -67 }, { -4, 50, -67 }, { -18, 50, -67 }, { -25, 50, -67 }, { -32, 50, -67 }, { -39, 50, -67 }, { 52, 50, -60 }, { 45, 50, -60 }, { 38, 50, -60 }, { 3, 50, -60 }, { -4, 50, -60 }, { -39, 50, -60 }, { -46, 50, -60 }, { 52, 50, -53 }, { 45, 50, -53 }, { 38, 50, -53 }, { 31, 50, -53 }, { 3, 50, -53 }, { -4, 50, -53 }, { -32, 50, -53 }, { -39, 50, -53 }, { -46, 50, -53 }, { -53, 50, -53 }, { 52, 50, -46 }, { 45, 50, -46 }, { 38, 50, -46 }, { 31, 50, -46 }, { 10, 50, -46 }, { 3, 50, -46 }, { -4, 50, -46 }, { -11, 50, -46 }, { -32, 50, -46 }, { -39, 50, -46 }, { -46, 50, -46 }, { -53, 50, -46 }, { 59, 50, -39 }, { 52, 50, -39 }, { 45, 50, -39 }, { 38, 50, -39 }, { 10, 50, -39 }, { 3, 50, -39 }, { -4, 50, -39 }, { -11, 50, -39 }, { -39, 50, -39 }, { -46, 50, -39 }, { -53, 50, -39 }, { -60, 50, -39 }, { 59, 50, -32 }, { 52, 50, -32 }, { 45, 50, -32 }, { 10, 50, -32 }, { 3, 50, -32 }, { -4, 50, -32 }, { -11, 50, -32 }, { -39, 50, -32 }, { -46, 50, -32 }, { -53, 50, -32 }, { -60, 50, -32 }, { 3, 50, -25 }, { -4, 50, -25 }, { -46, 50, -25 }, { -53, 50, -25 }, { -60, 50, -25 }, { 45, 50, -18 }, { 3, 50, -18 }, { -4, 50, -18 }, { -60, 50, -18 }, { 52, 50, -11 }, { 24, 50, -11 }, { 10, 50, -11 }, { 3, 50, -11 }, { -4, 50, -11 }, { -46, 50, -11 }, { -53, 50, -11 }, { 52, 50, -4 }, { 45, 50, -4 }, { 31, 50, -4 }, { 24, 50, -4 }, { 3, 50, -4 }, { -4, 50, -4 }, { -11, 50, -4 }, { -25, 50, -4 }, { -32, 50, -4 }, { -53, 50, -4 }, { 52, 50, 3 }, { 45, 50, 3 }, { 24, 50, 3 }, { 3, 50, 3 }, { -4, 50, 3 }, { -25, 50, 3 }, { -39, 50, 3 }, { -46, 50, 3 }, { 45, 50, 10 }, { 24, 50, 10 }, { 3, 50, 10 }, { -4, 50, 10 }, { -46, 50, 10 }, { 24, 50, 17 }, { 3, 50, 17 }, { -4, 50, 17 }, { -25, 50, 17 }, { -32, 50, 17 }, { -46, 50, 17 }, { 38, 50, 24 }, { 31, 50, 24 }, { 24, 50, 24 }, { 3, 50, 24 }, { -4, 50, 24 }, { -25, 50, 24 }, { -39, 50, 24 }, { 31, 50, 31 }, { 24, 50, 31 }, { 3, 50, 31 }, { -4, 50, 31 }, { -18, 50, 31 }, { -25, 50, 31 }, { -32, 50, 31 }, { 24, 50, 38 }, { 17, 50, 38 }, { 10, 50, 38 }, { 3, 50, 38 }, { -4, 50, 38 }, { -18, 50, 38 }, { -25, 50, 38 }, { 10, 50, 45 }, { 3, 50, 45 }, { 17, 57, -74 }, { 10, 57, -74 }, { -11, 57, -74 }, { -18, 57, -74 }, { 31, 57, -67 }, { 24, 57, -67 }, { 17, 57, -67 }, { 10, 57, -67 }, { 3, 57, -67 }, { -4, 57, -67 }, { -11, 57, -67 }, { -25, 57, -67 }, { -32, 57, -67 }, { 38, 57, -60 }, { 31, 57, -60 }, { 24, 57, -60 }, { 10, 57, -60 }, { 3, 57, -60 }, { -4, 57, -60 }, { -11, 57, -60 }, { -32, 57, -60 }, { -39, 57, -60 }, { 45, 57, -53 }, { 38, 57, -53 }, { 17, 57, -53 }, { 10, 57, -53 }, { 3, 57, -53 }, { -4, 57, -53 }, { -32, 57, -53 }, { -39, 57, -53 }, { -46, 57, -53 }, { 45, 57, -46 }, { 38, 57, -46 }, { 31, 57, -46 }, { 10, 57, -46 }, { 3, 57, -46 }, { -4, 57, -46 }, { -11, 57, -46 }, { -32, 57, -46 }, { -39, 57, -46 }, { 45, 57, -39 }, { 38, 57, -39 }, { 3, 57, -39 }, { -4, 57, -39 }, { -39, 57, -39 }, { 38, 57, -32 }, { 3, 57, -32 }, { -4, 57, -32 }, { -46, 57, -32 }, { 52, 57, -25 }, { 3, 57, -25 }, { -4, 57, -25 }, { -53, 57, -25 }, { 52, 57, -18 }, { 45, 57, -18 }, { 3, 57, -18 }, { -4, 57, -18 }, { -53, 57, -18 }, { 45, 57, -11 }, { 31, 57, -11 }, { 24, 57, -11 }, { 3, 57, -11 }, { -4, 57, -11 }, { -25, 57, -11 }, { -46, 57, -11 }, { 45, 57, -4 }, { 31, 57, -4 }, { 24, 57, -4 }, { 3, 57, -4 }, { -4, 57, -4 }, { -25, 57, -4 }, { -32, 57, -4 }, { -39, 57, -4 }, { -46, 57, -4 }, { 45, 57, 3 }, { 38, 57, 3 }, { 31, 57, 3 }, { 24, 57, 3 }, { 3, 57, 3 }, { -4, 57, 3 }, { -25, 57, 3 }, { -32, 57, 3 }, { -39, 57, 3 }, { 38, 57, 10 }, { 24, 57, 10 }, { 3, 57, 10 }, { -4, 57, 10 }, { -25, 57, 10 }, { -32, 57, 10 }, { -39, 57, 10 }, { 38, 57, 17 }, { 24, 57, 17 }, { 3, 57, 17 }, { -4, 57, 17 }, { -25, 57, 17 }, { -32, 57, 17 }, { -39, 57, 17 }, { 31, 57, 24 }, { 24, 57, 24 }, { 3, 57, 24 }, { -4, 57, 24 }, { -11, 57, 24 }, { -25, 57, 24 }, { -32, 57, 24 }, { 17, 57, 31 }, { 10, 57, 31 }, { 3, 57, 31 }, { -4, 57, 31 }, { -11, 57, 31 }, { -18, 57, 31 }, { 10, 57, 38 }, { 24, 64, -67 }, { 17, 64, -67 }, { 10, 64, -67 }, { -11, 64, -67 }, { -18, 64, -67 }, { 31, 64, -60 }, { 24, 64, -60 }, { 17, 64, -60 }, { 10, 64, -60 }, { 3, 64, -60 }, { -4, 64, -60 }, { -11, 64, -60 }, { -18, 64, -60 }, { 24, 64, -53 }, { 17, 64, -53 }, { 10, 64, -53 }, { 3, 64, -53 }, { -4, 64, -53 }, { -25, 64, -53 }, { -32, 64, -53 }, { 31, 64, -46 }, { 10, 64, -46 }, { 3, 64, -46 }, { -4, 64, -46 }, { -11, 64, -46 }, { -39, 64, -46 }, { 3, 64, -39 }, { -4, 64, -39 }, { -39, 64, -39 }, { 3, 64, -32 }, { -4, 64, -32 }, { 3, 64, -25 }, { -4, 64, -25 }, { 3, 64, -18 }, { -4, 64, -18 }, { 24, 64, -11 }, { 17, 64, -11 }, { 10, 64, -11 }, { 3, 64, -11 }, { -4, 64, -11 }, { -25, 64, -11 }, { 24, 64, -4 }, { 3, 64, -4 }, { -4, 64, -4 }, { -25, 64, -4 }, { -32, 64, -4 }, { 31, 64, 3 }, { 24, 64, 3 }, { 3, 64, 3 }, { -4, 64, 3 }, { -18, 64, 3 }, { -25, 64, 3 }, { -32, 64, 3 }, { 24, 64, 10 }, { 3, 64, 10 }, { -4, 64, 10 }, { -11, 64, 10 }, { -18, 64, 10 }, { -25, 64, 10 }, { 24, 64, 17 }, { 17, 64, 17 }, { 10, 64, 17 }, { 3, 64, 17 }, { -4, 64, 17 }, { -11, 64, 17 }, { -18, 64, 17 }, { -25, 64, 17 }, { 10, 64, 24 }, { -11, 64, 24 }, { 17, 71, -60 }, { 17, 71, -53 }, { 10, 71, -53 }, { -11, 71, -53 }, { -18, 71, -53 }, { -25, 71, -53 }, { 10, 71, -46 }, { -11, 71, -46 }, { -18, 71, -46 }, { -25, 71, -46 }, { 3, 71, -39 }, { -4, 71, -39 }, { 10, 71, -32 }, { 3, 71, -32 }, { 3, 71, -25 }, { 3, 71, -18 }, { -4, 71, -18 }, { 24, 71, -11 }, { 17, 71, -11 }, { 10, 71, -11 }, { 3, 71, -11 }, { -4, 71, -11 }, { -18, 71, -11 }, { 17, 71, -4 }, { 10, 71, -4 }, { 3, 71, -4 }, { -4, 71, -4 }, { -11, 71, -4 }, { -18, 71, -4 }, { 17, 71, 3 }, { 10, 71, 3 }, { 3, 71, 3 }, { -4, 71, 3 }, { -11, 71, 3 }, { -18, 71, 3 }, { 17, 71, 10 }, };

	void insertLoretaVoxelInMesh(C3DMesh& rMesh, float x, float y, float z, float s)
	{
		const size_t i = rMesh.m_vVertex.size();

		// Insert the 8 vertices of the cube
		rMesh.m_vVertex.emplace_back(x - s, y - s, z - s);	// i+0
		rMesh.m_vVertex.emplace_back(x + s, y - s, z - s);	// i+1
		rMesh.m_vVertex.emplace_back(x + s, y + s, z - s);	// i+2
		rMesh.m_vVertex.emplace_back(x - s, y + s, z - s);	// i+3

		rMesh.m_vVertex.emplace_back(x - s, y - s, z + s);	// i+4
		rMesh.m_vVertex.emplace_back(x + s, y - s, z + s);	// i+5
		rMesh.m_vVertex.emplace_back(x + s, y + s, z + s);	// i+6
		rMesh.m_vVertex.emplace_back(x - s, y + s, z + s);	// i+7

		// Insert the 12 triangles of the cube
		rMesh.m_vTriangle.push_back(i + 0);
		rMesh.m_vTriangle.push_back(i + 1);
		rMesh.m_vTriangle.push_back(i + 2);
		rMesh.m_vTriangle.push_back(i + 0);
		rMesh.m_vTriangle.push_back(i + 2);
		rMesh.m_vTriangle.push_back(i + 3);

		rMesh.m_vTriangle.push_back(i + 1);
		rMesh.m_vTriangle.push_back(i + 5);
		rMesh.m_vTriangle.push_back(i + 6);
		rMesh.m_vTriangle.push_back(i + 1);
		rMesh.m_vTriangle.push_back(i + 6);
		rMesh.m_vTriangle.push_back(i + 2);

		rMesh.m_vTriangle.push_back(i + 5);
		rMesh.m_vTriangle.push_back(i + 4);
		rMesh.m_vTriangle.push_back(i + 7);
		rMesh.m_vTriangle.push_back(i + 5);
		rMesh.m_vTriangle.push_back(i + 7);
		rMesh.m_vTriangle.push_back(i + 6);

		rMesh.m_vTriangle.push_back(i + 4);
		rMesh.m_vTriangle.push_back(i + 0);
		rMesh.m_vTriangle.push_back(i + 3);
		rMesh.m_vTriangle.push_back(i + 4);
		rMesh.m_vTriangle.push_back(i + 3);
		rMesh.m_vTriangle.push_back(i + 7);

		rMesh.m_vTriangle.push_back(i + 4);
		rMesh.m_vTriangle.push_back(i + 5);
		rMesh.m_vTriangle.push_back(i + 1);
		rMesh.m_vTriangle.push_back(i + 4);
		rMesh.m_vTriangle.push_back(i + 1);
		rMesh.m_vTriangle.push_back(i + 0);

		rMesh.m_vTriangle.push_back(i + 3);
		rMesh.m_vTriangle.push_back(i + 2);
		rMesh.m_vTriangle.push_back(i + 6);
		rMesh.m_vTriangle.push_back(i + 3);
		rMesh.m_vTriangle.push_back(i + 6);
		rMesh.m_vTriangle.push_back(i + 7);
	}
} // namespace

CRendererLoreta::CRendererLoreta()

{
#if 0
	m_oFace.load(Mensia::Directories::getDataDir() + "/content/Face.obj");
	m_oScalp.load(Mensia::Directories::getDataDir() + "/content/Scalp.obj");
#else
	m_oFace.load(g_pFaceData, sizeof(g_pFaceData));
	m_oScalp.load(g_pScalpData, sizeof(g_pScalpData));
#endif

	m_oBrain.clear();
	for (auto& voxel : g_iLoretaVoxel)
	{
		insertLoretaVoxelInMesh(m_oBrain, float(-voxel[0]), float(voxel[1]), float(-voxel[2]), 3.5);
	}

	m_vLookup.clear();
	const unsigned int l_uiCategoryIndex_BrodmannAreas = 0;
	const unsigned int l_uiCategoryIndex_AnatomicalAreas = 1;
	const unsigned int l_uiCategoryIndex_Lobes = 2;
	const unsigned int l_uiCategoryIndex_ROI = 3;
	m_vLookup.resize(4);

#if 0 /* SAVING DATA INTO C FILE */
	const char* l_sVoxelGroupFilename = "./LORETA-Talairach-BAs.csv";
	FILE * l_pFile = ::Mensia::Files::open(l_sVoxelGroupFilename, "rt");
	if (l_pFile)
	{
		int x, y, z, dx, dy, dz, d;
		char l_sLookup1[1024];
		char l_sLookup2[1024];
		char l_sLookup3[1024];
		char l_sLine[1024];
		if (::fscanf(l_pFile, "%s\n", l_sLine) == 0) // Avoids warning { }

			while (!::feof(l_pFile))
			{
				::strcpy(l_sLine, "");
				if (::fscanf(l_pFile, "%[^\n]\n\r", l_sLine) == 0) // Avoids warning { }

					int n = ::sscanf(l_sLine, "%i,%i,%i,%i,%i,%i,%i,%[^,],%[^,],%[^,]", &x, &y, &z, &dx, &dy, &dz, &d, l_sLookup1, l_sLookup2, l_sLookup3);
				if (n == 10)
				{
					// the brodmann areas in the CSV file are named "Brodmann area  X" (note the double space) or "Brodmann area XX"
					// reformat the Lookups to replace "area  X" by "area 0X" which allows alphabetical order browsing
					std::string l_sLookup1_fixed(l_sLookup1);
					std::size_t pos = l_sLookup1_fixed.find("area  ");
					if (pos != std::string::npos)
					{
						l_sLookup1_fixed.replace(pos, 6, "area 0");
					}
					std::string l_sLookup2_fixed(l_sLookup2);
					pos = l_sLookup2_fixed.find("area  ");
					if (pos != std::string::npos)
					{
						l_sLookup2_fixed.replace(pos, 6, "area 0");
					}
					std::string l_sLookup3_fixed(l_sLookup3);
					pos = l_sLookup3_fixed.find("area  ");
					if (pos != std::string::npos)
					{
						l_sLookup3_fixed.replace(pos, 6, "area 0");
					}

					bool l_bFound = false;
					//				::printf("Got %i %i %i - %s - %s - %s\n", x, y, z, l_sLookup1, l_sLookup2, l_sLookup3);
					for (int i = 0; i < 2394; ++i)
					{
						if (g_iLoretaVoxel[i][0] == -x && g_iLoretaVoxel[i][1] == z && g_iLoretaVoxel[i][2] == y)
						{
							m_vLookup[l_uiCategoryIndex_BrodmannAreas][l_sLookup1_fixed.c_str()].push_back(i);
							m_vLookup[l_uiCategoryIndex_AnatomicalAreas][l_sLookup2_fixed.c_str()].push_back(i);
							m_vLookup[l_uiCategoryIndex_Lobes][l_sLookup3_fixed.c_str()].push_back(i);
							l_bFound = true;
						}
					}
					if (!l_bFound)
					{
						::printf("Not found voxel %i %i %i - %s - %s - %s\n", x, y, z, l_sLookup1, l_sLookup2, l_sLookup3);
					}
				}
				else
				{
					break;
				}
			}
		//		::printf("Sucessfully read voxel groups from [%s] - %lu,%lu,%lu group(s)\n", l_sVoxelGroupFilename, m_vLookup[l_uiCategoryIndex_BrodmannAreas].size(), m_vLookup[l_uiCategoryIndex_AnatomicalAreas].size(), m_vLookup[l_uiCategoryIndex_Lobes].size());
		::fclose(l_pFile);

		const char* l_sDataFilename = "./loreta_anatomic_voxels.hpp";
		l_pFile = ::Mensia::Files::open(l_sDataFilename, "w");
		::fprintf(l_pFile, "/*********************************************************************\n * Software License Agreement (AGPL-3 License)\n *\n * OpenViBE Designer\n * Based on OpenViBE V1.1.0, Copyright (C) Inria, 2006-2015\n * Copyright (C) Inria, 2015-2017,V1.0\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License version 3,\n * as published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n");
		::fprintf(l_pFile, "#ifndef __autoconvert__LoretaAnatomic_csv__\n#define __autoconvert__LoretaAnatomic_csv__\n");
		::fprintf(l_pFile, "\nnamespace LoretaRegions\n{\n");
		::fprintf(l_pFile, "#ifndef LoretaRegions_VoxelRegionStruct\n#define LoretaRegions_VoxelRegionStruct\n\ttypedef struct\n\t{\n\t\tconst char * _sName;\n\t\tunsigned int _uiVoxelCount;\n\t\tunsigned int * _pVoxels;\n\t}SVoxelRegion;\n#endif\n\n");
		::fprintf(l_pFile, "#ifndef LoretaRegions_VoxelCount\n#define LoretaRegions_VoxelCount 2394\n#endif\n\n");

		std::map < std::string, std::vector < uint32_t > >::iterator l_oMapIterator;

		for (unsigned int l_iRegionIndex = 0; l_iRegionIndex < m_vLookup.size() - 1; l_iRegionIndex++) // all but ROI, they are in separated file
		{
			unsigned int l_uiAreaCount = 0;
			const char* l_sRegionGroupName;
			if (l_iRegionIndex == l_uiCategoryIndex_BrodmannAreas)
			{
				l_sRegionGroupName = "BrodmannAreas";
			}
			if (l_iRegionIndex == l_uiCategoryIndex_AnatomicalAreas)
			{
				l_sRegionGroupName = "AnatomicalAreas";
			}
			if (l_iRegionIndex == l_uiCategoryIndex_Lobes)
			{
				l_sRegionGroupName = "Lobes";
			}

			std::vector<unsigned int> l_vRightVoxels;
			std::vector<unsigned int> l_vLeftVoxels;
			for (l_oMapIterator = m_vLookup[l_iRegionIndex].begin(); l_oMapIterator != m_vLookup[l_iRegionIndex].end(); l_oMapIterator++)
			{
				//region
				l_vRightVoxels.clear();
				l_vLeftVoxels.clear();
				for (unsigned int l_uiVoxel = 0; l_uiVoxel < (*l_oMapIterator).second.size(); l_uiVoxel++)
				{
					if (g_iLoretaVoxel[(*l_oMapIterator).second[l_uiVoxel]][0] < 0) l_vRightVoxels.push_back((*l_oMapIterator).second[l_uiVoxel]);
					if (g_iLoretaVoxel[(*l_oMapIterator).second[l_uiVoxel]][0] > 0) l_vLeftVoxels.push_back((*l_oMapIterator).second[l_uiVoxel]);
				}

				::fprintf(l_pFile, "\tstatic unsigned int g_p%sVoxels_%i[%i] = {", l_sRegionGroupName, l_uiAreaCount, (*l_oMapIterator).second.size());
				for (unsigned int l_uiVoxel = 0; l_uiVoxel < (*l_oMapIterator).second.size() - 1; l_uiVoxel++)
				{
					::fprintf(l_pFile, "%i,", (*l_oMapIterator).second[l_uiVoxel]);
				}
				::fprintf(l_pFile, "%i};\n", (*l_oMapIterator).second[(*l_oMapIterator).second.size() - 1]);

				//region - RIGHT
				::fprintf(l_pFile, "\tstatic unsigned int g_p%sVoxels_%iR[%i] = {", l_sRegionGroupName, l_uiAreaCount, l_vRightVoxels.size());
				for (int l_uiVoxel = 0; l_uiVoxel < static_cast<int>(l_vRightVoxels.size()) - 1; l_uiVoxel++) // int to handle size == 0
				{
					::fprintf(l_pFile, "%i,", l_vRightVoxels[l_uiVoxel]);
				}
				::fprintf(l_pFile, "%i};\n", l_vRightVoxels[l_vRightVoxels.size() - 1]);

				//region - LEFT
				::fprintf(l_pFile, "\tstatic unsigned int g_p%sVoxels_%iL[%i] = {", l_sRegionGroupName, l_uiAreaCount, l_vLeftVoxels.size());
				for (int l_uiVoxel = 0; l_uiVoxel < static_cast<int>(l_vLeftVoxels.size()) - 1; l_uiVoxel++)
				{
					::fprintf(l_pFile, "%i,", l_vLeftVoxels[l_uiVoxel]);
				}
				::fprintf(l_pFile, "%i};\n", l_vLeftVoxels[l_vLeftVoxels.size() - 1]);

				l_uiAreaCount++;
			}
			::fprintf(l_pFile, "\n\tstatic unsigned int g_ui%sCount = %i;\n", l_sRegionGroupName, m_vLookup[l_iRegionIndex].size() * 3);
			::fprintf(l_pFile, "\tstatic SVoxelRegion g_p%s[%i] =\n\t{\n", l_sRegionGroupName, m_vLookup[l_iRegionIndex].size() * 3);
			l_uiAreaCount = 0;
			unsigned int l_uiRightVoxels = 0;
			unsigned int l_uiLeftVoxels = 0;
			for (l_oMapIterator = m_vLookup[l_iRegionIndex].begin(); l_oMapIterator != m_vLookup[l_iRegionIndex].end() && l_uiAreaCount < m_vLookup[l_iRegionIndex].size(); l_oMapIterator++)
			{
				l_uiRightVoxels = 0;
				l_uiLeftVoxels = 0;
				for (unsigned int l_uiVoxel = 0; l_uiVoxel < (*l_oMapIterator).second.size(); l_uiVoxel++)
				{
					if (g_iLoretaVoxel[(*l_oMapIterator).second[l_uiVoxel]][0] < 0) l_uiRightVoxels++;
					if (g_iLoretaVoxel[(*l_oMapIterator).second[l_uiVoxel]][0] > 0) l_uiLeftVoxels++;
				}

				if (l_uiAreaCount != m_vLookup[l_iRegionIndex].size() - 1)
				{
					::fprintf(l_pFile, "\t\t{\"%s\", %i, g_p%sVoxels_%i},\n", (*l_oMapIterator).first.c_str(), (*l_oMapIterator).second.size(), l_sRegionGroupName, l_uiAreaCount);
					::fprintf(l_pFile, "\t\t{\"%s\", %i, g_p%sVoxels_%iR},\n", ((*l_oMapIterator).first + " R").c_str(), l_uiRightVoxels, l_sRegionGroupName, l_uiAreaCount);
					::fprintf(l_pFile, "\t\t{\"%s\", %i, g_p%sVoxels_%iL},\n", ((*l_oMapIterator).first + " L").c_str(), l_uiLeftVoxels, l_sRegionGroupName, l_uiAreaCount);
				}
				else // last one
				{
					::fprintf(l_pFile, "\t\t{\"%s\", %i, g_p%sVoxels_%i},\n", (*l_oMapIterator).first.c_str(), (*l_oMapIterator).second.size(), l_sRegionGroupName, l_uiAreaCount);
					::fprintf(l_pFile, "\t\t{\"%s\", %i, g_p%sVoxels_%iR},\n", ((*l_oMapIterator).first + " R").c_str(), l_uiRightVoxels, l_sRegionGroupName, l_uiAreaCount);
					::fprintf(l_pFile, "\t\t{\"%s\", %i, g_p%sVoxels_%iL}\n\t};\n\n", ((*l_oMapIterator).first + " L").c_str(), l_uiLeftVoxels, l_sRegionGroupName, l_uiAreaCount);
				}

				l_uiAreaCount++;
			}
		}
		::fprintf(l_pFile, "}\n#endif\n");
		::fclose(l_pFile);

	}
	else
#endif
	{
		//::printf("Voxel description file [%s] not found, falling back to default.\n", l_sVoxelGroupFilename);
		unsigned int l_uiMapSize = g_uiBrodmannAreasCount;
		for (unsigned int i = 0; i < l_uiMapSize; ++i)
		{
			m_vLookup[l_uiCategoryIndex_BrodmannAreas][g_pBrodmannAreas[i]._sName].insert(m_vLookup[l_uiCategoryIndex_BrodmannAreas][g_pBrodmannAreas[i]._sName].begin(), g_pBrodmannAreas[i]._pVoxels, g_pBrodmannAreas[i]._pVoxels + g_pBrodmannAreas[i]._uiVoxelCount);
		}
		l_uiMapSize = g_uiAnatomicalAreasCount;
		for (unsigned int i = 0; i < l_uiMapSize; ++i)
		{
			m_vLookup[l_uiCategoryIndex_AnatomicalAreas][g_pAnatomicalAreas[i]._sName].insert(m_vLookup[l_uiCategoryIndex_AnatomicalAreas][g_pAnatomicalAreas[i]._sName].begin(), g_pAnatomicalAreas[i]._pVoxels, g_pAnatomicalAreas[i]._pVoxels + g_pAnatomicalAreas[i]._uiVoxelCount);
		}
		l_uiMapSize = g_uiLobesCount;
		for (unsigned int i = 0; i < l_uiMapSize; ++i)
		{
			m_vLookup[l_uiCategoryIndex_Lobes][g_pLobes[i]._sName].insert(m_vLookup[l_uiCategoryIndex_Lobes][g_pLobes[i]._sName].begin(), g_pLobes[i]._pVoxels, g_pLobes[i]._pVoxels + g_pLobes[i]._uiVoxelCount);
		}
	}

	// Loading ROI data
	unsigned int l_uiMapSize = g_uiROICount;
	for (unsigned int i = 0; i < l_uiMapSize; ++i)
	{
		m_vLookup[l_uiCategoryIndex_ROI][g_pRegionsOfInterest[i]._sName].insert(m_vLookup[l_uiCategoryIndex_ROI][g_pRegionsOfInterest[i]._sName].begin(), g_pRegionsOfInterest[i]._pVoxels, g_pRegionsOfInterest[i]._pVoxels + g_pRegionsOfInterest[i]._uiVoxelCount);
	}

	m_vSelected.resize(2394, true);

	this->CRendererLoreta::refreshBrainSubset();
}

void CRendererLoreta::rebuild(const IRendererContext& rContext)
{
	CRenderer::rebuild(rContext);
}

void CRendererLoreta::refresh(const IRendererContext& rContext)
{
	CRenderer::refresh(rContext);
}

#define __Rendering_VertexBuffer__

bool CRendererLoreta::render(const IRendererContext& rContext)
{
	uint32_t i, j;

	//	if(!m_historyCount) return false;
	//	if(m_history.size()!=2394) return false;

	float d = 3.5;

	//	::glDisable(GL_TEXTURE_1D);

	glEnable(GL_DEPTH_TEST);

	glMatrixMode(GL_PROJECTION);
	glPushMatrix();
	glLoadIdentity();
	gluPerspective(60, rContext.getAspect(), .01, 100);
	glTranslatef(0, 0, -d);
	glRotatef(rContext.getRotationX() * 10, 1, 0, 0);
	glRotatef(rContext.getRotationY() * 10, 0, 1, 0);

	glMatrixMode(GL_MODELVIEW);
	glPushMatrix();
	glLoadIdentity();
	glScalef(rContext.getZoom(), rContext.getZoom(), rContext.getZoom());

	glPushMatrix();
	glTranslatef(0, .5, 0);
	glScalef(.00944f, .00944f, .00944f);
	glRotatef(19, 1, 0, 0);
	glTranslatef(0, -10, 15);
	glDisable(GL_DEPTH_TEST);

	if (m_historyCount && m_history.size() == 2394)
	{
		std::vector<float> l_vSample;
		this->getSampleAtERPFraction(m_ERPFraction, l_vSample);

#if defined __Rendering_VertexBuffer__
		for (i = 0, j = 0; i < 2394; ++i)
		{
			// Apply texture coordinate to each of the 8 vertices of this voxel
			const float l_fPower = l_vSample[i] * rContext.getScale();
			m_oBrain.m_vVertex[j++].u = l_fPower;
			m_oBrain.m_vVertex[j++].u = l_fPower;
			m_oBrain.m_vVertex[j++].u = l_fPower;
			m_oBrain.m_vVertex[j++].u = l_fPower;
			m_oBrain.m_vVertex[j++].u = l_fPower;
			m_oBrain.m_vVertex[j++].u = l_fPower;
			m_oBrain.m_vVertex[j++].u = l_fPower;
			m_oBrain.m_vVertex[j++].u = l_fPower;
		}
#else
		for (uint32_t i = 0; i < 2394; ++i)
		{
			if (m_vSelected[i])
			{
				float l_fPower = l_vSample[i] * rContext.getScale();
				// m_history[i][m_historyCount-m_sampleCount+m_sampleIndexERP]*rContext.getScale();
				::glColor4f(.1f, .1f, .1f, rContext.getTranslucency());
				::glPushMatrix();
				::glTexCoord1f(l_fPower);
				::glTranslatef(float(-g_iLoretaVoxel[i][0]), float(g_iLoretaVoxel[i][1]), float(-g_iLoretaVoxel[i][2]));
				::glScalef(3.5, 3.5, 3.5);
				cube();
				::glPopMatrix();
			}
		}
#endif
	}
	else
	{
#if defined __Rendering_VertexBuffer__
		for (i = 0, j = 0; i < 2394; ++i)
		{
			// Apply texture coordinate to each of the 8 vertices of this voxel
			const float l_fPower = 0;
			m_oBrain.m_vVertex[j++].u = l_fPower;
			m_oBrain.m_vVertex[j++].u = l_fPower;
			m_oBrain.m_vVertex[j++].u = l_fPower;
			m_oBrain.m_vVertex[j++].u = l_fPower;
			m_oBrain.m_vVertex[j++].u = l_fPower;
			m_oBrain.m_vVertex[j++].u = l_fPower;
			m_oBrain.m_vVertex[j++].u = l_fPower;
			m_oBrain.m_vVertex[j++].u = l_fPower;
		}
#else
		for (uint32_t i = 0; i < 2394; ++i)
		{
			if (m_vSelected[i])
			{
				// float l_fPower=m_history[i][m_historyCount-m_sampleCount+m_sampleIndexERP]*rContext.getScale();
				::glColor4f(.1f, .1f, .1f, rContext.getTranslucency());
				::glPushMatrix();
				::glTexCoord1f(0);
				::glTranslatef(float(-g_iLoretaVoxel[i][0]), float(g_iLoretaVoxel[i][1]), float(-g_iLoretaVoxel[i][2]));
				::glScalef(3.5, 3.5, 3.5);
				cube();
				::glPopMatrix();
			}
		}
#endif
	}

#if defined __Rendering_VertexBuffer__
	glEnable(GL_TEXTURE_1D);
	glDisable(GL_LIGHTING);
	glColor4f(.1f, .1f, .1f, rContext.getTranslucency());
	glEnableClientState(GL_VERTEX_ARRAY);
	glEnableClientState(GL_TEXTURE_COORD_ARRAY);
	glVertexPointer(3, GL_FLOAT, sizeof(CVertex), &m_oBrain.m_vVertex[0].x);
	glTexCoordPointer(1, GL_FLOAT, sizeof(CVertex), &m_oBrain.m_vVertex[0].u);
	// ::glDrawElements(GL_TRIANGLES, m_oBrain.m_vTriangle.size(), GL_UNSIGNED_INT, &m_oBrain.m_vTriangle[0]);
	if (!m_vBrainSubsetTriangle.empty())
	{
		glDrawElements(GL_TRIANGLES, GLsizei(m_vBrainSubsetTriangle.size()), GL_UNSIGNED_INT, &m_vBrainSubsetTriangle[0]);
	}
	glDisableClientState(GL_TEXTURE_COORD_ARRAY);
	glDisableClientState(GL_VERTEX_ARRAY);
#endif

	glPopMatrix();

	glEnable(GL_LIGHTING);
	glDisable(GL_TEXTURE_1D);
	glPushMatrix();
	glTranslatef(0, .5f, 0);
	glRotatef(19, 1, 0, 0);
	glTranslatef(0, -.2f, .35f);
	//	::glScalef(1.8f, 1.8f, 1.8f);

	if (rContext.isScalpMeshVisible())
	{
		glColor4f(.8f, .6f, .5f, .1f);
		glEnableClientState(GL_VERTEX_ARRAY);
		glEnableClientState(GL_NORMAL_ARRAY);
		glVertexPointer(3, GL_FLOAT, sizeof(CVertex), &m_oScalp.m_vVertex[0].x);
		glNormalPointer(GL_FLOAT, sizeof(CVertex), &m_oScalp.m_vNormal[0].x);
		glDrawElements(GL_TRIANGLES, GLsizei(m_oScalp.m_vTriangle.size()), GL_UNSIGNED_INT, &m_oScalp.m_vTriangle[0]);
		glDisableClientState(GL_NORMAL_ARRAY);
		glDisableClientState(GL_VERTEX_ARRAY);
	}
	if (rContext.isFaceMeshVisible())
	{
		glColor4f(.8f, .6f, .5f, .1f);
		glDisable(GL_TEXTURE_1D);
		glEnableClientState(GL_VERTEX_ARRAY);
		glEnableClientState(GL_NORMAL_ARRAY);
		glVertexPointer(3, GL_FLOAT, sizeof(CVertex), &m_oFace.m_vVertex[0].x);
		glNormalPointer(GL_FLOAT, sizeof(CVertex), &m_oFace.m_vNormal[0].x);
		glDrawElements(GL_TRIANGLES, GLsizei(m_oFace.m_vTriangle.size()), GL_UNSIGNED_INT, &m_oFace.m_vTriangle[0]);
		glDisableClientState(GL_NORMAL_ARRAY);
		glDisableClientState(GL_VERTEX_ARRAY);
	}

	glDisable(GL_LIGHTING);
	glPopMatrix();

	if (rContext.getCheckBoardVisibility()) { this->drawCoordinateSystem(); }

	glMatrixMode(GL_MODELVIEW);
	glPopMatrix();

	glMatrixMode(GL_PROJECTION);
	glPopMatrix();

	glMatrixMode(GL_MODELVIEW);

	return true;
}

void CRendererLoreta::clearRegionSelection()
{
	for (std::vector<bool>::iterator it = m_vSelected.begin(); it != m_vSelected.end(); ++it)
	{
		*it = false;
	}
	this->refreshBrainSubset();
}

uint32_t CRendererLoreta::getRegionCategoryCount() { return uint32_t(m_vLookup.size()); }

uint32_t CRendererLoreta::getRegionCount(uint32_t ui32RegionCategory)
{
	if (ui32RegionCategory >= m_vLookup.size()) { return 0; }
	return uint32_t(m_vLookup[ui32RegionCategory].size());
}

const char* CRendererLoreta::getRegionCategoryName(uint32_t ui32RegionCategory)
{
	switch (ui32RegionCategory)
	{
		case 0: return "Brodmann";
		case 1: return "Anatomic";
		case 2: return "Lobe";
		case 3: return "Function";
		default: return nullptr;
	}
}

const char* CRendererLoreta::getRegionName(uint32_t ui32RegionCategory, uint32_t ui32RegionIndex)
{
	if (ui32RegionCategory >= m_vLookup.size()) { return nullptr; }

	std::map<std::string, std::vector<uint32_t>>& l_vLookup = m_vLookup[ui32RegionCategory];
	auto it = l_vLookup.begin();

	for (uint32_t j = 0; j < ui32RegionIndex && it != l_vLookup.end(); j++)
	{
		++it;
	}

	if (it != l_vLookup.end()) { return it->first.c_str(); }

	return nullptr;
}

void CRendererLoreta::selectRegion(uint32_t ui32RegionCategory, const char* sRegionName)
{
	if (ui32RegionCategory >= m_vLookup.size()) { return; }

	std::map<std::string, std::vector<uint32_t>>& l_vLookup = m_vLookup[ui32RegionCategory];

	std::map<std::string, std::vector<uint32_t>>::iterator it = l_vLookup.find(sRegionName);
	if (it != l_vLookup.end())
	{
		std::vector<uint32_t>& l_rList = it->second;
		for (auto& i : l_rList)
		{
			m_vSelected[i] = true;
		}
	}

	this->refreshBrainSubset();
}

void CRendererLoreta::selectRegion(uint32_t ui32RegionCategory, uint32_t ui32RegionIndex)
{
	if (ui32RegionCategory >= m_vLookup.size()) { return; }

	std::map<std::string, std::vector<uint32_t>>& l_vLookup = m_vLookup[ui32RegionCategory];
	std::map<std::string, std::vector<uint32_t>>::iterator it = l_vLookup.begin();

	for (uint32_t j = 0; j < ui32RegionIndex && it != l_vLookup.end(); j++)
	{
		++it;
	}

	if (it != l_vLookup.end())
	{
		std::vector<uint32_t>& l_rList = it->second;
		for (auto& i : l_rList)
		{
			m_vSelected[i] = true;
		}
	}

	this->refreshBrainSubset();
}

void CRendererLoreta::refreshBrainSubset()

{
	// Initializes look up to its maximum size

	m_vBrainSubsetTriangle = m_oBrain.m_vTriangle;

	// Inserts selected voxels in look up

	const uint32_t l_ui32TrianglePerRenderedVoxel = 12;
	const uint32_t l_ui32VertexPerRenderedVoxel = l_ui32TrianglePerRenderedVoxel * 3;
	uint32_t i, j, k;
	for (i = 0, j = 0, k = 0; i < 2394; i++, k += l_ui32VertexPerRenderedVoxel)
	{
		if (m_vSelected[i] == true)
		{
			for (uint32_t l = 0; l < l_ui32VertexPerRenderedVoxel; l++)
			{
				m_vBrainSubsetTriangle[j++] = m_oBrain.m_vTriangle[k + l];
			}
		}
	}

	// Crops look up to the subset size

	m_vBrainSubsetTriangle.resize(j);
}

#endif // TARGET_HAS_ThirdPartyOpenGL
